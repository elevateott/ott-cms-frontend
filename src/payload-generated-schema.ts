/* tslint:disable */

/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  text,
  jsonb,
  numeric,
  serial,
  timestamp,
  type AnyPgColumn,
  pgEnum,
  uuid,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_pages_hero_links_link_type = pgEnum('enum_pages_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_pages_hero_links_link_appearance = pgEnum(
  'enum_pages_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
)
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum_pages_meta_social_media_twitter_card = pgEnum(
  'enum_pages_meta_social_media_twitter_card',
  ['summary', 'summary_large_image', 'player'],
)
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  'enum__pages_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum__pages_v_version_meta_social_media_twitter_card = pgEnum(
  'enum__pages_v_version_meta_social_media_twitter_card',
  ['summary', 'summary_large_image', 'player'],
)
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_posts_meta_social_media_twitter_card = pgEnum(
  'enum_posts_meta_social_media_twitter_card',
  ['summary', 'summary_large_image', 'player'],
)
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_meta_social_media_twitter_card = pgEnum(
  'enum__posts_v_version_meta_social_media_twitter_card',
  ['summary', 'summary_large_image', 'player'],
)
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_categories_featured_on = pgEnum('enum_categories_featured_on', [
  'none',
  'home',
  'nav',
  'both',
])
export const enum_categories_meta_social_media_twitter_card = pgEnum(
  'enum_categories_meta_social_media_twitter_card',
  ['summary', 'summary_large_image', 'player'],
)
export const enum_mux_webhook_jobs_status = pgEnum('enum_mux_webhook_jobs_status', [
  'pending',
  'complete',
  'failed',
])
export const enum_videoassets_subtitles_tracks_kind = pgEnum(
  'enum_videoassets_subtitles_tracks_kind',
  ['subtitles', 'captions', 'descriptions'],
)
export const enum_videoassets_source_type = pgEnum('enum_videoassets_source_type', [
  'mux',
  'embedded',
])
export const enum_videoassets_mux_data_status = pgEnum('enum_videoassets_mux_data_status', [
  'uploading',
  'processing',
  'ready',
  'error',
])
export const enum_videoassets_mux_advanced_settings_video_quality = pgEnum(
  'enum_videoassets_mux_advanced_settings_video_quality',
  ['basic', 'plus', 'premium'],
)
export const enum_videoassets_mux_advanced_settings_max_resolution = pgEnum(
  'enum_videoassets_mux_advanced_settings_max_resolution',
  ['1080p'],
)
export const enum_videoassets_mux_advanced_settings_playback_policy = pgEnum(
  'enum_videoassets_mux_advanced_settings_playback_policy',
  ['public', 'signed'],
)
export const enum_content_status = pgEnum('enum_content_status', ['draft', 'published'])
export const enum_content_meta_social_media_twitter_card = pgEnum(
  'enum_content_meta_social_media_twitter_card',
  ['summary', 'summary_large_image', 'player'],
)
export const enum_creators_social_links_platform = pgEnum('enum_creators_social_links_platform', [
  'website',
  'twitter',
  'instagram',
  'youtube',
  'facebook',
  'linkedin',
  'tiktok',
  'other',
])
export const enum_series_layout = pgEnum('enum_series_layout', ['grid', 'list', 'carousel'])
export const enum_series_meta_social_media_twitter_card = pgEnum(
  'enum_series_meta_social_media_twitter_card',
  ['summary', 'summary_large_image', 'player'],
)
export const enum_filters_type = pgEnum('enum_filters_type', [
  'category',
  'creator',
  'tag',
  'series',
  'custom',
])
export const enum_carousels_items_item_type = pgEnum('enum_carousels_items_item_type', [
  'content',
  'series',
])
export const enum_carousels_show_on_pages = pgEnum('enum_carousels_show_on_pages', [
  'home',
  'content',
  'series',
])
export const enum_carousels_display_options_layout = pgEnum(
  'enum_carousels_display_options_layout',
  ['standard', 'featured', 'compact'],
)
export const enum_carousels_display_options_items_per_view = pgEnum(
  'enum_carousels_display_options_items_per_view',
  ['auto', '2', '3', '4', '5'],
)
export const enum_live_events_ppv_prices_by_currency_currency = pgEnum(
  'enum_live_events_ppv_prices_by_currency_currency',
  ['usd', 'eur', 'gbp', 'cad', 'aud', 'jpy'],
)
export const enum_live_events_rental_prices_by_currency_currency = pgEnum(
  'enum_live_events_rental_prices_by_currency_currency',
  ['usd', 'eur', 'gbp', 'cad', 'aud', 'jpy'],
)
export const enum_live_events_simulcast_targets_status = pgEnum(
  'enum_live_events_simulcast_targets_status',
  ['connected', 'disconnected', 'error'],
)
export const enum_live_events_playback_policy = pgEnum('enum_live_events_playback_policy', [
  'public',
  'signed',
])
export const enum_live_events_status = pgEnum('enum_live_events_status', [
  'draft',
  'scheduled',
  'active',
  'completed',
  'cancelled',
])
export const enum_live_events_access_type = pgEnum('enum_live_events_access_type', [
  'free',
  'subscription',
  'paid_ticket',
])
export const enum_live_events_mux_status = pgEnum('enum_live_events_mux_status', [
  'idle',
  'active',
  'disconnected',
  'completed',
  'disabled',
])
export const enum_recordings_playback_policy = pgEnum('enum_recordings_playback_policy', [
  'public',
  'signed',
])
export const enum_notifications_type = pgEnum('enum_notifications_type', [
  'info',
  'success',
  'warning',
  'error',
])
export const enum_subscribers_active_recurring_add_ons_status = pgEnum(
  'enum_subscribers_active_recurring_add_ons_status',
  ['active', 'trialing', 'past_due', 'canceled'],
)
export const enum_subscribers_payment_provider = pgEnum('enum_subscribers_payment_provider', [
  'stripe',
  'paypal',
  'unknown',
])
export const enum_subscribers_subscription_status = pgEnum('enum_subscribers_subscription_status', [
  'active',
  'trialing',
  'past_due',
  'canceled',
  'none',
])
export const enum_subscription_plans_prices_by_currency_currency = pgEnum(
  'enum_subscription_plans_prices_by_currency_currency',
  ['usd', 'eur', 'gbp', 'cad', 'aud', 'jpy'],
)
export const enum_subscription_plans_interval = pgEnum('enum_subscription_plans_interval', [
  'month',
  'quarter',
  'semi-annual',
  'year',
])
export const enum_subscription_plans_payment_provider = pgEnum(
  'enum_subscription_plans_payment_provider',
  ['all', 'stripe', 'paypal'],
)
export const enum_discount_codes_limit_to = pgEnum('enum_discount_codes_limit_to', [
  'subscriptions',
  'ppv',
  'rentals',
  'products',
  'addons',
])
export const enum_discount_codes_type = pgEnum('enum_discount_codes_type', [
  'percent_off',
  'amount_off',
])
export const enum_transactions_type = pgEnum('enum_transactions_type', [
  'subscription',
  'ppv',
  'rental',
  'product',
])
export const enum_transactions_payment_provider = pgEnum('enum_transactions_payment_provider', [
  'stripe',
  'paypal',
  'manual',
])
export const enum_transactions_status = pgEnum('enum_transactions_status', [
  'completed',
  'pending',
  'failed',
  'refunded',
])
export const enum_digital_products_prices_by_currency_currency = pgEnum(
  'enum_digital_products_prices_by_currency_currency',
  ['usd', 'eur', 'gbp', 'cad', 'aud', 'jpy'],
)
export const enum_addons_prices_by_currency_currency = pgEnum(
  'enum_addons_prices_by_currency_currency',
  ['usd', 'eur', 'gbp', 'cad', 'aud', 'jpy'],
)
export const enum_addons_type = pgEnum('enum_addons_type', ['one-time', 'recurring'])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'sendEventReminders',
  'monitorDisconnectedStreams',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'sendEventReminders',
  'monitorDisconnectedStreams',
  'schedulePublish',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_streaming_settings_streaming_source_types = pgEnum(
  'enum_streaming_settings_streaming_source_types',
  ['Mux', 'Embedded', 'Both'],
)
export const enum_streaming_settings_mux_settings_default_playback_policy = pgEnum(
  'enum_streaming_settings_mux_settings_default_playback_policy',
  ['public', 'signed'],
)
export const enum_ott_settings_monetization_plans_interval = pgEnum(
  'enum_ott_settings_monetization_plans_interval',
  ['month', 'year'],
)
export const enum_ott_settings_player_default_player_quality = pgEnum(
  'enum_ott_settings_player_default_player_quality',
  ['auto', '480p', '720p', '1080p', '2160p'],
)
export const enum_cloud_storage_settings_provider = pgEnum('enum_cloud_storage_settings_provider', [
  'vercel-blob',
  's3',
  'azure',
  'gcs',
  'uploadthing',
])
export const enum_payment_settings_active_payment_methods = pgEnum(
  'enum_payment_settings_active_payment_methods',
  ['stripe', 'paypal'],
)
export const enum_payment_settings_currency_supported_currencies = pgEnum(
  'enum_payment_settings_currency_supported_currencies',
  ['usd', 'eur', 'gbp', 'cad', 'aud', 'jpy'],
)
export const enum_payment_settings_paypal_environment = pgEnum(
  'enum_payment_settings_paypal_environment',
  ['sandbox', 'live'],
)
export const enum_payment_settings_currency_default_currency = pgEnum(
  'enum_payment_settings_currency_default_currency',
  ['usd', 'eur', 'gbp', 'cad', 'aud', 'jpy'],
)

export const pages_hero_links = pgTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_hero_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    hero_type: enum_pages_hero_type('hero_type').default('lowImpact'),
    hero_richText: jsonb('hero_rich_text'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    meta_socialMedia_twitterCard: enum_pages_meta_social_media_twitter_card(
      'meta_social_media_twitter_card',
    ).default('summary_large_image'),
    meta_socialMedia_twitterHandle: varchar('meta_social_media_twitter_handle'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(columns.hero_media),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_meta_meta_image_1_idx: index('pages_meta_meta_image_1_idx').on(columns.meta_image),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_links = pgTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('lowImpact'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_meta_socialMedia_twitterCard: enum__pages_v_version_meta_social_media_twitter_card(
      'version_meta_social_media_twitter_card',
    ).default('summary_large_image'),
    version_meta_socialMedia_twitterHandle: varchar('version_meta_social_media_twitter_handle'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_meta_version_meta_image_1_idx: index(
      '_pages_v_version_meta_version_meta_image_1_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    meta_socialMedia_twitterCard: enum_posts_meta_social_media_twitter_card(
      'meta_social_media_twitter_card',
    ).default('summary_large_image'),
    meta_socialMedia_twitterHandle: varchar('meta_social_media_twitter_handle'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_meta_meta_image_1_idx: index('posts_meta_meta_image_1_idx').on(columns.meta_image),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_meta_socialMedia_twitterCard: enum__posts_v_version_meta_social_media_twitter_card(
      'version_meta_social_media_twitter_card',
    ).default('summary_large_image'),
    version_meta_socialMedia_twitterHandle: varchar('version_meta_social_media_twitter_handle'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(
      columns.version_heroImage,
    ),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_meta_version_meta_image_1_idx: index(
      '_posts_v_version_meta_version_meta_image_1_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: index('media_filename_idx').on(columns.filename),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    featuredCategory: boolean('featured_category').default(false),
    showInCatalog: boolean('show_in_catalog').default(true),
    order: numeric('order'),
    parentCategory: integer('parent_category_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    featuredOn: enum_categories_featured_on('featured_on').default('none'),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_socialMedia_twitterCard: enum_categories_meta_social_media_twitter_card(
      'meta_social_media_twitter_card',
    ).default('summary_large_image'),
    meta_socialMedia_twitterHandle: varchar('meta_social_media_twitter_handle'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: uniqueIndex('categories_slug_idx').on(columns.slug),
    categories_featured_image_idx: index('categories_featured_image_idx').on(columns.featuredImage),
    categories_parent_category_idx: index('categories_parent_category_idx').on(
      columns.parentCategory,
    ),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_meta_meta_image_idx: index('categories_meta_meta_image_idx').on(columns.meta_image),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const categories_rels = pgTable(
  'categories_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    contentID: integer('content_id'),
  },
  (columns) => ({
    order: index('categories_rels_order_idx').on(columns.order),
    parentIdx: index('categories_rels_parent_idx').on(columns.parent),
    pathIdx: index('categories_rels_path_idx').on(columns.path),
    categories_rels_content_id_idx: index('categories_rels_content_id_idx').on(columns.contentID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [categories.id],
      name: 'categories_rels_parent_fk',
    }).onDelete('cascade'),
    contentIdFk: foreignKey({
      columns: [columns['contentID']],
      foreignColumns: [content.id],
      name: 'categories_rels_content_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const mux_webhook_jobs = pgTable(
  'mux_webhook_jobs',
  {
    id: serial('id').primaryKey(),
    videoId: varchar('video_id').notNull(),
    assetId: varchar('asset_id').notNull(),
    status: enum_mux_webhook_jobs_status('status').notNull().default('pending'),
    attemptCount: numeric('attempt_count').default('0'),
    lastAttempt: timestamp('last_attempt', { mode: 'string', withTimezone: true, precision: 3 }),
    error: varchar('error'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    mux_webhook_jobs_updated_at_idx: index('mux_webhook_jobs_updated_at_idx').on(columns.updatedAt),
    mux_webhook_jobs_created_at_idx: index('mux_webhook_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const videoassets_subtitles_tracks = pgTable(
  'videoassets_subtitles_tracks',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    language: varchar('language'),
    name: varchar('name'),
    kind: enum_videoassets_subtitles_tracks_kind('kind').default('subtitles'),
    closedCaptions: boolean('closed_captions').default(false),
    muxTrackId: varchar('mux_track_id'),
    url: varchar('url'),
  },
  (columns) => ({
    _orderIdx: index('videoassets_subtitles_tracks_order_idx').on(columns._order),
    _parentIDIdx: index('videoassets_subtitles_tracks_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [videoassets.id],
      name: 'videoassets_subtitles_tracks_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const videoassets = pgTable(
  'videoassets',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    sourceType: enum_videoassets_source_type('source_type').notNull().default('mux'),
    overrideDRM: boolean('override_d_r_m').default(false),
    useDRM: boolean('use_d_r_m').default(false),
    drmConfigurationId: varchar('drm_configuration_id'),
    muxData_uploadId: varchar('mux_data_upload_id'),
    muxData_assetId: varchar('mux_data_asset_id'),
    muxData_playbackId: varchar('mux_data_playback_id'),
    muxData_status: enum_videoassets_mux_data_status('mux_data_status').default('uploading'),
    muxAdvancedSettings_videoQuality: enum_videoassets_mux_advanced_settings_video_quality(
      'mux_advanced_settings_video_quality',
    ).default('basic'),
    muxAdvancedSettings_maxResolution: enum_videoassets_mux_advanced_settings_max_resolution(
      'mux_advanced_settings_max_resolution',
    ).default('1080p'),
    muxAdvancedSettings_playbackPolicy: enum_videoassets_mux_advanced_settings_playback_policy(
      'mux_advanced_settings_playback_policy',
    ).default('public'),
    muxAdvancedSettings_normalizeAudio: boolean('mux_advanced_settings_normalize_audio').default(
      false,
    ),
    muxAdvancedSettings_autoGenerateCaptions: boolean(
      'mux_advanced_settings_auto_generate_captions',
    ).default(false),
    embeddedUrl: varchar('embedded_url'),
    duration: numeric('duration'),
    aspectRatio: varchar('aspect_ratio'),
    thumbnail: integer('thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    muxThumbnailUrl: varchar('mux_thumbnail_url'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    videoassets_slug_idx: index('videoassets_slug_idx').on(columns.slug),
    videoassets_thumbnail_idx: index('videoassets_thumbnail_idx').on(columns.thumbnail),
    videoassets_updated_at_idx: index('videoassets_updated_at_idx').on(columns.updatedAt),
  }),
)

export const content_bonus_videos = pgTable(
  'content_bonus_videos',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    video: integer('video_id')
      .notNull()
      .references(() => videoassets.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('content_bonus_videos_order_idx').on(columns._order),
    _parentIDIdx: index('content_bonus_videos_parent_id_idx').on(columns._parentID),
    content_bonus_videos_video_idx: index('content_bonus_videos_video_idx').on(columns.video),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [content.id],
      name: 'content_bonus_videos_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const content_tags = pgTable(
  'content_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('content_tags_order_idx').on(columns._order),
    _parentIDIdx: index('content_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [content.id],
      name: 'content_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const content = pgTable(
  'content',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    posterImage: integer('poster_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    releaseDate: timestamp('release_date', { mode: 'string', withTimezone: true, precision: 3 }),
    mainVideo: integer('main_video_id')
      .notNull()
      .references(() => videoassets.id, {
        onDelete: 'set null',
      }),
    trailerVideo: integer('trailer_video_id').references(() => videoassets.id, {
      onDelete: 'set null',
    }),
    status: enum_content_status('status').notNull().default('draft'),
    isPublished: boolean('is_published').default(false),
    isFree: boolean('is_free').default(false),
    publishAt: timestamp('publish_at', { mode: 'string', withTimezone: true, precision: 3 }),
    unpublishAt: timestamp('unpublish_at', { mode: 'string', withTimezone: true, precision: 3 }),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_socialMedia_twitterCard: enum_content_meta_social_media_twitter_card(
      'meta_social_media_twitter_card',
    ).default('summary_large_image'),
    meta_socialMedia_twitterHandle: varchar('meta_social_media_twitter_handle'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    content_slug_idx: index('content_slug_idx').on(columns.slug),
    content_poster_image_idx: index('content_poster_image_idx').on(columns.posterImage),
    content_main_video_idx: index('content_main_video_idx').on(columns.mainVideo),
    content_trailer_video_idx: index('content_trailer_video_idx').on(columns.trailerVideo),
    content_meta_meta_image_idx: index('content_meta_meta_image_idx').on(columns.meta_image),
    content_updated_at_idx: index('content_updated_at_idx').on(columns.updatedAt),
    content_created_at_idx: index('content_created_at_idx').on(columns.createdAt),
  }),
)

export const content_rels = pgTable(
  'content_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
    creatorsID: integer('creators_id'),
    'subscription-plansID': integer('subscription_plans_id'),
  },
  (columns) => ({
    order: index('content_rels_order_idx').on(columns.order),
    parentIdx: index('content_rels_parent_idx').on(columns.parent),
    pathIdx: index('content_rels_path_idx').on(columns.path),
    content_rels_categories_id_idx: index('content_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    content_rels_creators_id_idx: index('content_rels_creators_id_idx').on(columns.creatorsID),
    content_rels_subscription_plans_id_idx: index('content_rels_subscription_plans_id_idx').on(
      columns['subscription-plansID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [content.id],
      name: 'content_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'content_rels_categories_fk',
    }).onDelete('cascade'),
    creatorsIdFk: foreignKey({
      columns: [columns['creatorsID']],
      foreignColumns: [creators.id],
      name: 'content_rels_creators_fk',
    }).onDelete('cascade'),
    'subscription-plansIdFk': foreignKey({
      columns: [columns['subscription-plansID']],
      foreignColumns: [subscription_plans.id],
      name: 'content_rels_subscription_plans_fk',
    }).onDelete('cascade'),
  }),
)

export const creators_social_links = pgTable(
  'creators_social_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    platform: enum_creators_social_links_platform('platform').notNull(),
    url: varchar('url').notNull(),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('creators_social_links_order_idx').on(columns._order),
    _parentIDIdx: index('creators_social_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [creators.id],
      name: 'creators_social_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const creators = pgTable(
  'creators',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    bio: varchar('bio'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    avatar: integer('avatar_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    publicProfile: boolean('public_profile').default(true),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    creators_slug_idx: index('creators_slug_idx').on(columns.slug),
    creators_avatar_idx: index('creators_avatar_idx').on(columns.avatar),
    creators_updated_at_idx: index('creators_updated_at_idx').on(columns.updatedAt),
  }),
)

export const series_tags = pgTable(
  'series_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('series_tags_order_idx').on(columns._order),
    _parentIDIdx: index('series_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [series.id],
      name: 'series_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const series = pgTable(
  'series',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    thumbnail: integer('thumbnail_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    trailer: integer('trailer_id').references(() => videoassets.id, {
      onDelete: 'set null',
    }),
    layout: enum_series_layout('layout').default('grid'),
    isFeatured: boolean('is_featured').default(false),
    isFree: boolean('is_free').default(false),
    price: numeric('price'),
    isPublished: boolean('is_published').default(false),
    publishAt: timestamp('publish_at', { mode: 'string', withTimezone: true, precision: 3 }),
    unpublishAt: timestamp('unpublish_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_socialMedia_twitterCard: enum_series_meta_social_media_twitter_card(
      'meta_social_media_twitter_card',
    ).default('summary_large_image'),
    meta_socialMedia_twitterHandle: varchar('meta_social_media_twitter_handle'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    series_slug_idx: index('series_slug_idx').on(columns.slug),
    series_thumbnail_idx: index('series_thumbnail_idx').on(columns.thumbnail),
    series_trailer_idx: index('series_trailer_idx').on(columns.trailer),
    series_meta_meta_image_idx: index('series_meta_meta_image_idx').on(columns.meta_image),
    series_updated_at_idx: index('series_updated_at_idx').on(columns.updatedAt),
  }),
)

export const series_rels = pgTable(
  'series_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    contentID: integer('content_id'),
    creatorsID: integer('creators_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('series_rels_order_idx').on(columns.order),
    parentIdx: index('series_rels_parent_idx').on(columns.parent),
    pathIdx: index('series_rels_path_idx').on(columns.path),
    series_rels_content_id_idx: index('series_rels_content_id_idx').on(columns.contentID),
    series_rels_creators_id_idx: index('series_rels_creators_id_idx').on(columns.creatorsID),
    series_rels_categories_id_idx: index('series_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [series.id],
      name: 'series_rels_parent_fk',
    }).onDelete('cascade'),
    contentIdFk: foreignKey({
      columns: [columns['contentID']],
      foreignColumns: [content.id],
      name: 'series_rels_content_fk',
    }).onDelete('cascade'),
    creatorsIdFk: foreignKey({
      columns: [columns['creatorsID']],
      foreignColumns: [creators.id],
      name: 'series_rels_creators_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'series_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const filters = pgTable(
  'filters',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    type: enum_filters_type('type').notNull(),
    value: varchar('value').notNull(),
    fieldPath: varchar('field_path'),
    order: numeric('order').default('0'),
    isActive: boolean('is_active').default(true),
    group: varchar('group'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    filters_updated_at_idx: index('filters_updated_at_idx').on(columns.updatedAt),
    filters_created_at_idx: index('filters_created_at_idx').on(columns.createdAt),
  }),
)

export const carousels_items = pgTable(
  'carousels_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    itemType: enum_carousels_items_item_type('item_type').notNull(),
    order: numeric('order').notNull().default('1'),
    customTitle: varchar('custom_title'),
    customDescription: varchar('custom_description'),
  },
  (columns) => ({
    _orderIdx: index('carousels_items_order_idx').on(columns._order),
    _parentIDIdx: index('carousels_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [carousels.id],
      name: 'carousels_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const carousels_show_on_pages = pgTable(
  'carousels_show_on_pages',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_carousels_show_on_pages('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('carousels_show_on_pages_order_idx').on(columns.order),
    parentIdx: index('carousels_show_on_pages_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [carousels.id],
      name: 'carousels_show_on_pages_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const carousels = pgTable(
  'carousels',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    description: varchar('description'),
    displayOptions_layout: enum_carousels_display_options_layout('display_options_layout')
      .notNull()
      .default('standard'),
    displayOptions_itemsPerView: enum_carousels_display_options_items_per_view(
      'display_options_items_per_view',
    )
      .notNull()
      .default('auto'),
    displayOptions_showArrows: boolean('display_options_show_arrows').default(true),
    displayOptions_showDots: boolean('display_options_show_dots').default(false),
    displayOptions_autoplay: boolean('display_options_autoplay').default(false),
    displayOptions_autoplaySpeed: numeric('display_options_autoplay_speed').default('5000'),
    isActive: boolean('is_active').default(true),
    order: numeric('order').default('999'),
    visibleFrom: timestamp('visible_from', { mode: 'string', withTimezone: true, precision: 3 }),
    visibleUntil: timestamp('visible_until', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    carousels_slug_idx: index('carousels_slug_idx').on(columns.slug),
    carousels_updated_at_idx: index('carousels_updated_at_idx').on(columns.updatedAt),
    carousels_created_at_idx: index('carousels_created_at_idx').on(columns.createdAt),
  }),
)

export const carousels_rels = pgTable(
  'carousels_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    contentID: integer('content_id'),
    seriesID: integer('series_id'),
  },
  (columns) => ({
    order: index('carousels_rels_order_idx').on(columns.order),
    parentIdx: index('carousels_rels_parent_idx').on(columns.parent),
    pathIdx: index('carousels_rels_path_idx').on(columns.path),
    carousels_rels_content_id_idx: index('carousels_rels_content_id_idx').on(columns.contentID),
    carousels_rels_series_id_idx: index('carousels_rels_series_id_idx').on(columns.seriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [carousels.id],
      name: 'carousels_rels_parent_fk',
    }).onDelete('cascade'),
    contentIdFk: foreignKey({
      columns: [columns['contentID']],
      foreignColumns: [content.id],
      name: 'carousels_rels_content_fk',
    }).onDelete('cascade'),
    seriesIdFk: foreignKey({
      columns: [columns['seriesID']],
      foreignColumns: [series.id],
      name: 'carousels_rels_series_fk',
    }).onDelete('cascade'),
  }),
)

export const live_events_ppv_prices_by_currency = pgTable(
  'live_events_ppv_prices_by_currency',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    currency: enum_live_events_ppv_prices_by_currency_currency('currency'),
    amount: numeric('amount'),
    stripePriceId: varchar('stripe_price_id'),
  },
  (columns) => ({
    _orderIdx: index('live_events_ppv_prices_by_currency_order_idx').on(columns._order),
    _parentIDIdx: index('live_events_ppv_prices_by_currency_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [live_events.id],
      name: 'live_events_ppv_prices_by_currency_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const live_events_rental_prices_by_currency = pgTable(
  'live_events_rental_prices_by_currency',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    currency: enum_live_events_rental_prices_by_currency_currency('currency'),
    amount: numeric('amount'),
    stripePriceId: varchar('stripe_price_id'),
  },
  (columns) => ({
    _orderIdx: index('live_events_rental_prices_by_currency_order_idx').on(columns._order),
    _parentIDIdx: index('live_events_rental_prices_by_currency_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [live_events.id],
      name: 'live_events_rental_prices_by_currency_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const live_events_mux_playback_ids = pgTable(
  'live_events_mux_playback_ids',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    playbackId: varchar('playback_id'),
    policy: varchar('policy'),
  },
  (columns) => ({
    _orderIdx: index('live_events_mux_playback_ids_order_idx').on(columns._order),
    _parentIDIdx: index('live_events_mux_playback_ids_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [live_events.id],
      name: 'live_events_mux_playback_ids_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const live_events_simulcast_targets = pgTable(
  'live_events_simulcast_targets',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    url: varchar('url'),
    streamKey: varchar('stream_key'),
    status: enum_live_events_simulcast_targets_status('status').default('disconnected'),
  },
  (columns) => ({
    _orderIdx: index('live_events_simulcast_targets_order_idx').on(columns._order),
    _parentIDIdx: index('live_events_simulcast_targets_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [live_events.id],
      name: 'live_events_simulcast_targets_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const live_events = pgTable(
  'live_events',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    thumbnail: integer('thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    useExternalHlsUrl: boolean('use_external_hls_url').default(false),
    isSimulatedLive: boolean('is_simulated_live').default(false),
    simulatedLiveAssetId: integer('simulated_live_asset_id_id').references(() => recordings.id, {
      onDelete: 'set null',
    }),
    simulatedLiveStartTime: timestamp('simulated_live_start_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    externalHlsUrl: varchar('external_hls_url'),
    isRecordingEnabled: boolean('is_recording_enabled').default(true),
    multiCamEnabled: boolean('multi_cam_enabled').default(false),
    multiCamInstructions: jsonb('multi_cam_instructions'),
    reconnectWindow: numeric('reconnect_window').default('60'),
    playbackPolicy: enum_live_events_playback_policy('playback_policy').default('public'),
    status: enum_live_events_status('status').notNull().default('draft'),
    scheduledStartTime: timestamp('scheduled_start_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    scheduledEndTime: timestamp('scheduled_end_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    preregistrationEnabled: boolean('preregistration_enabled').default(false),
    accessType: enum_live_events_access_type('access_type').notNull().default('free'),
    ticketPrice: numeric('ticket_price'),
    ppvEnabled: boolean('ppv_enabled').default(false),
    ppvPrice: numeric('ppv_price'),
    ppvStripeProductId: varchar('ppv_stripe_product_id'),
    ppvStripePriceId: varchar('ppv_stripe_price_id'),
    rentalEnabled: boolean('rental_enabled').default(false),
    rentalPrice: numeric('rental_price'),
    rentalDurationHours: numeric('rental_duration_hours').default('48'),
    rentalStripeProductId: varchar('rental_stripe_product_id'),
    rentalStripePriceId: varchar('rental_stripe_price_id'),
    reminderMinutesBefore: numeric('reminder_minutes_before').default('30'),
    muxLiveStreamId: varchar('mux_live_stream_id'),
    muxStreamKey: varchar('mux_stream_key'),
    muxStatus: enum_live_events_mux_status('mux_status'),
    muxCreatedAt: timestamp('mux_created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    recordingAssetId: varchar('recording_asset_id'),
    simulatedLiveStreamId: varchar('simulated_live_stream_id'),
    simulatedLivePlaybackId: varchar('simulated_live_playback_id'),
    disconnectedAt: timestamp('disconnected_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    endedAt: timestamp('ended_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    live_events_slug_idx: index('live_events_slug_idx').on(columns.slug),
    live_events_thumbnail_idx: index('live_events_thumbnail_idx').on(columns.thumbnail),
    live_events_simulated_live_asset_id_idx: index('live_events_simulated_live_asset_id_idx').on(
      columns.simulatedLiveAssetId,
    ),
    live_events_updated_at_idx: index('live_events_updated_at_idx').on(columns.updatedAt),
  }),
)

export const live_events_rels = pgTable(
  'live_events_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    recordingsID: integer('recordings_id'),
    'live-event-registrationsID': integer('live_event_registrations_id'),
    'subscription-plansID': integer('subscription_plans_id'),
  },
  (columns) => ({
    order: index('live_events_rels_order_idx').on(columns.order),
    parentIdx: index('live_events_rels_parent_idx').on(columns.parent),
    pathIdx: index('live_events_rels_path_idx').on(columns.path),
    live_events_rels_recordings_id_idx: index('live_events_rels_recordings_id_idx').on(
      columns.recordingsID,
    ),
    live_events_rels_live_event_registrations_id_idx: index(
      'live_events_rels_live_event_registrations_id_idx',
    ).on(columns['live-event-registrationsID']),
    live_events_rels_subscription_plans_id_idx: index(
      'live_events_rels_subscription_plans_id_idx',
    ).on(columns['subscription-plansID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [live_events.id],
      name: 'live_events_rels_parent_fk',
    }).onDelete('cascade'),
    recordingsIdFk: foreignKey({
      columns: [columns['recordingsID']],
      foreignColumns: [recordings.id],
      name: 'live_events_rels_recordings_fk',
    }).onDelete('cascade'),
    'live-event-registrationsIdFk': foreignKey({
      columns: [columns['live-event-registrationsID']],
      foreignColumns: [live_event_registrations.id],
      name: 'live_events_rels_live_event_registrations_fk',
    }).onDelete('cascade'),
    'subscription-plansIdFk': foreignKey({
      columns: [columns['subscription-plansID']],
      foreignColumns: [subscription_plans.id],
      name: 'live_events_rels_subscription_plans_fk',
    }).onDelete('cascade'),
  }),
)

export const recordings = pgTable(
  'recordings',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    liveEvent: integer('live_event_id')
      .notNull()
      .references(() => live_events.id, {
        onDelete: 'set null',
      }),
    playbackUrl: varchar('playback_url'),
    thumbnailUrl: varchar('thumbnail_url'),
    duration: numeric('duration'),
    muxAssetId: varchar('mux_asset_id'),
    muxPlaybackId: varchar('mux_playback_id'),
    playbackPolicy: enum_recordings_playback_policy('playback_policy').default('public'),
    price: numeric('price'),
    downloadUrl: varchar('download_url'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    recordings_slug_idx: index('recordings_slug_idx').on(columns.slug),
    recordings_live_event_idx: index('recordings_live_event_idx').on(columns.liveEvent),
    recordings_updated_at_idx: index('recordings_updated_at_idx').on(columns.updatedAt),
  }),
)

export const live_event_registrations = pgTable(
  'live_event_registrations',
  {
    id: serial('id').primaryKey(),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    email: varchar('email').notNull(),
    liveEvent: integer('live_event_id')
      .notNull()
      .references(() => live_events.id, {
        onDelete: 'set null',
      }),
    confirmed: boolean('confirmed').default(false),
    confirmationToken: varchar('confirmation_token'),
    reminderSent: boolean('reminder_sent').default(false),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    live_event_registrations_live_event_idx: index('live_event_registrations_live_event_idx').on(
      columns.liveEvent,
    ),
    live_event_registrations_updated_at_idx: index('live_event_registrations_updated_at_idx').on(
      columns.updatedAt,
    ),
  }),
)

export const notifications = pgTable(
  'notifications',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    message: varchar('message').notNull(),
    type: enum_notifications_type('type').notNull().default('info'),
    read: boolean('read').default(false),
    relatedLiveEvent: integer('related_live_event_id').references(() => live_events.id, {
      onDelete: 'set null',
    }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    notifications_related_live_event_idx: index('notifications_related_live_event_idx').on(
      columns.relatedLiveEvent,
    ),
    notifications_updated_at_idx: index('notifications_updated_at_idx').on(columns.updatedAt),
  }),
)

export const subscribers_rental_expirations = pgTable(
  'subscribers_rental_expirations',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    contentId: integer('content_id_id').references(() => content.id, {
      onDelete: 'set null',
    }),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('subscribers_rental_expirations_order_idx').on(columns._order),
    _parentIDIdx: index('subscribers_rental_expirations_parent_id_idx').on(columns._parentID),
    subscribers_rental_expirations_content_id_idx: index(
      'subscribers_rental_expirations_content_id_idx',
    ).on(columns.contentId),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [subscribers.id],
      name: 'subscribers_rental_expirations_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const subscribers_event_rental_expirations = pgTable(
  'subscribers_event_rental_expirations',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    eventId: integer('event_id_id').references(() => live_events.id, {
      onDelete: 'set null',
    }),
    purchasedAt: timestamp('purchased_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('subscribers_event_rental_expirations_order_idx').on(columns._order),
    _parentIDIdx: index('subscribers_event_rental_expirations_parent_id_idx').on(columns._parentID),
    subscribers_event_rental_expirations_event_id_idx: index(
      'subscribers_event_rental_expirations_event_id_idx',
    ).on(columns.eventId),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [subscribers.id],
      name: 'subscribers_event_rental_expirations_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const subscribers_active_recurring_add_ons = pgTable(
  'subscribers_active_recurring_add_ons',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    addon: integer('addon_id')
      .notNull()
      .references(() => addons.id, {
        onDelete: 'set null',
      }),
    stripeSubscriptionId: varchar('stripe_subscription_id'),
    status: enum_subscribers_active_recurring_add_ons_status('status').default('active'),
    startedAt: timestamp('started_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    currentPeriodEnd: timestamp('current_period_end', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    _orderIdx: index('subscribers_active_recurring_add_ons_order_idx').on(columns._order),
    _parentIDIdx: index('subscribers_active_recurring_add_ons_parent_id_idx').on(columns._parentID),
    subscribers_active_recurring_add_ons_addon_idx: index(
      'subscribers_active_recurring_add_ons_addon_idx',
    ).on(columns.addon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [subscribers.id],
      name: 'subscribers_active_recurring_add_ons_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const subscribers_manually_granted_rentals = pgTable(
  'subscribers_manually_granted_rentals',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    event: integer('event_id')
      .notNull()
      .references(() => live_events.id, {
        onDelete: 'set null',
      }),
    grantedAt: timestamp('granted_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('subscribers_manually_granted_rentals_order_idx').on(columns._order),
    _parentIDIdx: index('subscribers_manually_granted_rentals_parent_id_idx').on(columns._parentID),
    subscribers_manually_granted_rentals_event_idx: index(
      'subscribers_manually_granted_rentals_event_idx',
    ).on(columns.event),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [subscribers.id],
      name: 'subscribers_manually_granted_rentals_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const subscribers_active_sessions = pgTable(
  'subscribers_active_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    deviceId: varchar('device_id').notNull(),
    ip: varchar('ip'),
    userAgent: varchar('user_agent'),
    lastActive: timestamp('last_active', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('subscribers_active_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('subscribers_active_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [subscribers.id],
      name: 'subscribers_active_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const subscribers = pgTable(
  'subscribers',
  {
    id: serial('id').primaryKey(),
    activePlansCount: varchar('active_plans_count'),
    purchasedRentalsCount: varchar('purchased_rentals_count'),
    purchasedPPVCount: varchar('purchased_p_p_v_count'),
    purchasedProductsCount: varchar('purchased_products_count'),
    purchasedAddOnsCount: varchar('purchased_add_ons_count'),
    fullName: varchar('full_name').notNull(),
    email: varchar('email').notNull(),
    paymentProvider: enum_subscribers_payment_provider('payment_provider').default('unknown'),
    paymentProviderCustomerId: varchar('payment_provider_customer_id'),
    subscriptionStatus: enum_subscribers_subscription_status('subscription_status').default('none'),
    subscriptionExpiresAt: timestamp('subscription_expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    hasManualSubscription: boolean('has_manual_subscription').default(false),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    notes: varchar('notes'),
    subscriberToken: varchar('subscriber_token'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    subscribers_email_idx: uniqueIndex('subscribers_email_idx').on(columns.email),
    subscribers_user_idx: index('subscribers_user_idx').on(columns.user),
    subscribers_updated_at_idx: index('subscribers_updated_at_idx').on(columns.updatedAt),
  }),
)

export const subscribers_rels = pgTable(
  'subscribers_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'subscription-plansID': integer('subscription_plans_id'),
    contentID: integer('content_id'),
    'live-eventsID': integer('live_events_id'),
    'digital-productsID': integer('digital_products_id'),
    addonsID: integer('addons_id'),
  },
  (columns) => ({
    order: index('subscribers_rels_order_idx').on(columns.order),
    parentIdx: index('subscribers_rels_parent_idx').on(columns.parent),
    pathIdx: index('subscribers_rels_path_idx').on(columns.path),
    subscribers_rels_subscription_plans_id_idx: index(
      'subscribers_rels_subscription_plans_id_idx',
    ).on(columns['subscription-plansID']),
    subscribers_rels_content_id_idx: index('subscribers_rels_content_id_idx').on(columns.contentID),
    subscribers_rels_live_events_id_idx: index('subscribers_rels_live_events_id_idx').on(
      columns['live-eventsID'],
    ),
    subscribers_rels_digital_products_id_idx: index('subscribers_rels_digital_products_id_idx').on(
      columns['digital-productsID'],
    ),
    subscribers_rels_addons_id_idx: index('subscribers_rels_addons_id_idx').on(columns.addonsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [subscribers.id],
      name: 'subscribers_rels_parent_fk',
    }).onDelete('cascade'),
    'subscription-plansIdFk': foreignKey({
      columns: [columns['subscription-plansID']],
      foreignColumns: [subscription_plans.id],
      name: 'subscribers_rels_subscription_plans_fk',
    }).onDelete('cascade'),
    contentIdFk: foreignKey({
      columns: [columns['contentID']],
      foreignColumns: [content.id],
      name: 'subscribers_rels_content_fk',
    }).onDelete('cascade'),
    'live-eventsIdFk': foreignKey({
      columns: [columns['live-eventsID']],
      foreignColumns: [live_events.id],
      name: 'subscribers_rels_live_events_fk',
    }).onDelete('cascade'),
    'digital-productsIdFk': foreignKey({
      columns: [columns['digital-productsID']],
      foreignColumns: [digital_products.id],
      name: 'subscribers_rels_digital_products_fk',
    }).onDelete('cascade'),
    addonsIdFk: foreignKey({
      columns: [columns['addonsID']],
      foreignColumns: [addons.id],
      name: 'subscribers_rels_addons_fk',
    }).onDelete('cascade'),
  }),
)

export const subscription_plans_prices_by_currency = pgTable(
  'subscription_plans_prices_by_currency',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    currency: enum_subscription_plans_prices_by_currency_currency('currency').notNull(),
    amount: numeric('amount').notNull(),
    stripePriceId: varchar('stripe_price_id'),
  },
  (columns) => ({
    _orderIdx: index('subscription_plans_prices_by_currency_order_idx').on(columns._order),
    _parentIDIdx: index('subscription_plans_prices_by_currency_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [subscription_plans.id],
      name: 'subscription_plans_prices_by_currency_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const subscription_plans_features = pgTable(
  'subscription_plans_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature').notNull(),
  },
  (columns) => ({
    _orderIdx: index('subscription_plans_features_order_idx').on(columns._order),
    _parentIDIdx: index('subscription_plans_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [subscription_plans.id],
      name: 'subscription_plans_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const subscription_plans = pgTable(
  'subscription_plans',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    price: numeric('price'),
    interval: enum_subscription_plans_interval('interval').notNull().default('month'),
    trialPeriodDays: numeric('trial_period_days').default('0'),
    setupFeeAmount: numeric('setup_fee_amount').default('0'),
    isActive: boolean('is_active').default(true),
    version: numeric('version').default('1'),
    isDefault: boolean('is_default').default(false),
    order: numeric('order').default('0'),
    maxDevices: numeric('max_devices').default('2'),
    stripeProductId: varchar('stripe_product_id'),
    stripePriceId: varchar('stripe_price_id'),
    stripeSetupFeeId: varchar('stripe_setup_fee_id'),
    paypalProductId: varchar('paypal_product_id'),
    paypalPlanId: varchar('paypal_plan_id'),
    paymentProvider: enum_subscription_plans_payment_provider('payment_provider').default('all'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    subscription_plans_slug_idx: index('subscription_plans_slug_idx').on(columns.slug),
    subscription_plans_updated_at_idx: index('subscription_plans_updated_at_idx').on(
      columns.updatedAt,
    ),
  }),
)

export const discount_codes_limit_to = pgTable(
  'discount_codes_limit_to',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_discount_codes_limit_to('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('discount_codes_limit_to_order_idx').on(columns.order),
    parentIdx: index('discount_codes_limit_to_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [discount_codes.id],
      name: 'discount_codes_limit_to_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const discount_codes = pgTable(
  'discount_codes',
  {
    id: serial('id').primaryKey(),
    code: varchar('code').notNull(),
    description: varchar('description'),
    type: enum_discount_codes_type('type').notNull().default('percent_off'),
    value: numeric('value').notNull(),
    isActive: boolean('is_active').default(true),
    validFrom: timestamp('valid_from', { mode: 'string', withTimezone: true, precision: 3 }),
    validUntil: timestamp('valid_until', { mode: 'string', withTimezone: true, precision: 3 }),
    maxUses: numeric('max_uses'),
    usageCount: numeric('usage_count').default('0'),
    stripeCouponId: varchar('stripe_coupon_id'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    discount_codes_code_idx: uniqueIndex('discount_codes_code_idx').on(columns.code),
    discount_codes_updated_at_idx: index('discount_codes_updated_at_idx').on(columns.updatedAt),
  }),
)

export const transactions = pgTable(
  'transactions',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    type: enum_transactions_type('type').notNull(),
    amount: numeric('amount').notNull(),
    currency: varchar('currency').default('USD'),
    paymentProvider: enum_transactions_payment_provider('payment_provider').notNull(),
    status: enum_transactions_status('status').notNull().default('completed'),
    subscriber: uuid('subscriber_id').references(() => subscribers.id, {
      onDelete: 'set null',
    }),
    event: uuid('event_id').references(() => live_events.id, {
      onDelete: 'set null',
    }),
    content: uuid('content_id').references(() => content.id, {
      onDelete: 'set null',
    }),
    plan: uuid('plan_id').references(() => subscription_plans.id, {
      onDelete: 'set null',
    }),
    product: uuid('product_id').references(() => digital_products.id, {
      onDelete: 'set null',
    }),
    transactionId: varchar('transaction_id'),
    paymentMethod: varchar('payment_method'),
    metadata: jsonb('metadata'),
    rentalDuration: numeric('rental_duration'),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }),
    notes: varchar('notes'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    transactions_subscriber_idx: index('transactions_subscriber_idx').on(columns.subscriber),
    transactions_event_idx: index('transactions_event_idx').on(columns.event),
    transactions_content_idx: index('transactions_content_idx').on(columns.content),
    transactions_plan_idx: index('transactions_plan_idx').on(columns.plan),
    transactions_product_idx: index('transactions_product_idx').on(columns.product),
    transactions_updated_at_idx: index('transactions_updated_at_idx').on(columns.updatedAt),
  }),
)

export const digital_products_prices_by_currency = pgTable(
  'digital_products_prices_by_currency',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    currency: enum_digital_products_prices_by_currency_currency('currency').notNull(),
    amount: numeric('amount').notNull(),
    stripePriceId: varchar('stripe_price_id'),
  },
  (columns) => ({
    _orderIdx: index('digital_products_prices_by_currency_order_idx').on(columns._order),
    _parentIDIdx: index('digital_products_prices_by_currency_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [digital_products.id],
      name: 'digital_products_prices_by_currency_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const digital_products = pgTable(
  'digital_products',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    price: numeric('price'),
    downloadLink: varchar('download_link').notNull(),
    thumbnail: integer('thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    stripeProductId: varchar('stripe_product_id'),
    stripePriceId: varchar('stripe_price_id'),
    purchaseCount: numeric('purchase_count').default('0'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    digital_products_thumbnail_idx: index('digital_products_thumbnail_idx').on(columns.thumbnail),
    digital_products_updated_at_idx: index('digital_products_updated_at_idx').on(columns.updatedAt),
  }),
)

export const addons_prices_by_currency = pgTable(
  'addons_prices_by_currency',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    currency: enum_addons_prices_by_currency_currency('currency').notNull(),
    amount: numeric('amount').notNull(),
    stripePriceId: varchar('stripe_price_id'),
  },
  (columns) => ({
    _orderIdx: index('addons_prices_by_currency_order_idx').on(columns._order),
    _parentIDIdx: index('addons_prices_by_currency_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [addons.id],
      name: 'addons_prices_by_currency_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const addons = pgTable(
  'addons',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    type: enum_addons_type('type').notNull(),
    price: numeric('price'),
    isActive: boolean('is_active').default(true),
    order: numeric('order').default('0'),
    purchaseCount: numeric('purchase_count').default('0'),
    stripeProductId: varchar('stripe_product_id'),
    stripePriceId: varchar('stripe_price_id'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    addons_slug_idx: index('addons_slug_idx').on(columns.slug),
    addons_updated_at_idx: index('addons_updated_at_idx').on(columns.updatedAt),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You''ve received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
    'mux-webhook-jobsID': integer('mux_webhook_jobs_id'),
    videoassetsID: integer('videoassets_id'),
    contentID: integer('content_id'),
    creatorsID: integer('creators_id'),
    seriesID: integer('series_id'),
    filtersID: integer('filters_id'),
    carouselsID: integer('carousels_id'),
    'live-eventsID': integer('live_events_id'),
    recordingsID: integer('recordings_id'),
    'live-event-registrationsID': integer('live_event_registrations_id'),
    notificationsID: integer('notifications_id'),
    subscribersID: integer('subscribers_id'),
    'subscription-plansID': integer('subscription_plans_id'),
    'discount-codesID': integer('discount_codes_id'),
    transactionsID: integer('transactions_id'),
    'digital-productsID': integer('digital_products_id'),
    addonsID: integer('addons_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_mux_webhook_jobs_id_idx: index(
      'payload_locked_documents_rels_mux_webhook_jobs_id_idx',
    ).on(columns['mux-webhook-jobsID']),
    payload_locked_documents_rels_videoassets_id_idx: index(
      'payload_locked_documents_rels_videoassets_id_idx',
    ).on(columns.videoassetsID),
    payload_locked_documents_rels_content_id_idx: index(
      'payload_locked_documents_rels_content_id_idx',
    ).on(columns.contentID),
    payload_locked_documents_rels_creators_id_idx: index(
      'payload_locked_documents_rels_creators_id_idx',
    ).on(columns.creatorsID),
    payload_locked_documents_rels_series_id_idx: index(
      'payload_locked_documents_rels_series_id_idx',
    ).on(columns.seriesID),
    payload_locked_documents_rels_filters_id_idx: index(
      'payload_locked_documents_rels_filters_id_idx',
    ).on(columns.filtersID),
    payload_locked_documents_rels_carousels_id_idx: index(
      'payload_locked_documents_rels_carousels_id_idx',
    ).on(columns.carouselsID),
    payload_locked_documents_rels_live_events_id_idx: index(
      'payload_locked_documents_rels_live_events_id_idx',
    ).on(columns['live-eventsID']),
    payload_locked_documents_rels_recordings_id_idx: index(
      'payload_locked_documents_rels_recordings_id_idx',
    ).on(columns.recordingsID),
    payload_locked_documents_rels_live_event_registrations_id_idx: index(
      'payload_locked_documents_rels_live_event_registrations_id_idx',
    ).on(columns['live-event-registrationsID']),
    payload_locked_documents_rels_notifications_id_idx: index(
      'payload_locked_documents_rels_notifications_id_idx',
    ).on(columns.notificationsID),
    payload_locked_documents_rels_subscribers_id_idx: index(
      'payload_locked_documents_rels_subscribers_id_idx',
    ).on(columns.subscribersID),
    payload_locked_documents_rels_subscription_plans_id_idx: index(
      'payload_locked_documents_rels_subscription_plans_id_idx',
    ).on(columns['subscription-plansID']),
    payload_locked_documents_rels_discount_codes_id_idx: index(
      'payload_locked_documents_rels_discount_codes_id_idx',
    ).on(columns['discount-codesID']),
    payload_locked_documents_rels_transactions_id_idx: index(
      'payload_locked_documents_rels_transactions_id_idx',
    ).on(columns.transactionsID),
    payload_locked_documents_rels_digital_products_id_idx: index(
      'payload_locked_documents_rels_digital_products_id_idx',
    ).on(columns['digital-productsID']),
    payload_locked_documents_rels_addons_id_idx: index(
      'payload_locked_documents_rels_addons_id_idx',
    ).on(columns.addonsID),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    'mux-webhook-jobsIdFk': foreignKey({
      columns: [columns['mux-webhook-jobsID']],
      foreignColumns: [mux_webhook_jobs.id],
      name: 'payload_locked_documents_rels_mux_webhook_jobs_fk',
    }).onDelete('cascade'),
    videoassetsIdFk: foreignKey({
      columns: [columns['videoassetsID']],
      foreignColumns: [videoassets.id],
      name: 'payload_locked_documents_rels_videoassets_fk',
    }).onDelete('cascade'),
    contentIdFk: foreignKey({
      columns: [columns['contentID']],
      foreignColumns: [content.id],
      name: 'payload_locked_documents_rels_content_fk',
    }).onDelete('cascade'),
    creatorsIdFk: foreignKey({
      columns: [columns['creatorsID']],
      foreignColumns: [creators.id],
      name: 'payload_locked_documents_rels_creators_fk',
    }).onDelete('cascade'),
    seriesIdFk: foreignKey({
      columns: [columns['seriesID']],
      foreignColumns: [series.id],
      name: 'payload_locked_documents_rels_series_fk',
    }).onDelete('cascade'),
    filtersIdFk: foreignKey({
      columns: [columns['filtersID']],
      foreignColumns: [filters.id],
      name: 'payload_locked_documents_rels_filters_fk',
    }).onDelete('cascade'),
    carouselsIdFk: foreignKey({
      columns: [columns['carouselsID']],
      foreignColumns: [carousels.id],
      name: 'payload_locked_documents_rels_carousels_fk',
    }).onDelete('cascade'),
    'live-eventsIdFk': foreignKey({
      columns: [columns['live-eventsID']],
      foreignColumns: [live_events.id],
      name: 'payload_locked_documents_rels_live_events_fk',
    }).onDelete('cascade'),
    recordingsIdFk: foreignKey({
      columns: [columns['recordingsID']],
      foreignColumns: [recordings.id],
      name: 'payload_locked_documents_rels_recordings_fk',
    }).onDelete('cascade'),
    'live-event-registrationsIdFk': foreignKey({
      columns: [columns['live-event-registrationsID']],
      foreignColumns: [live_event_registrations.id],
      name: 'payload_locked_documents_rels_live_event_registrations_fk',
    }).onDelete('cascade'),
    notificationsIdFk: foreignKey({
      columns: [columns['notificationsID']],
      foreignColumns: [notifications.id],
      name: 'payload_locked_documents_rels_notifications_fk',
    }).onDelete('cascade'),
    subscribersIdFk: foreignKey({
      columns: [columns['subscribersID']],
      foreignColumns: [subscribers.id],
      name: 'payload_locked_documents_rels_subscribers_fk',
    }).onDelete('cascade'),
    'subscription-plansIdFk': foreignKey({
      columns: [columns['subscription-plansID']],
      foreignColumns: [subscription_plans.id],
      name: 'payload_locked_documents_rels_subscription_plans_fk',
    }).onDelete('cascade'),
    'discount-codesIdFk': foreignKey({
      columns: [columns['discount-codesID']],
      foreignColumns: [discount_codes.id],
      name: 'payload_locked_documents_rels_discount_codes_fk',
    }).onDelete('cascade'),
    transactionsIdFk: foreignKey({
      columns: [columns['transactionsID']],
      foreignColumns: [transactions.id],
      name: 'payload_locked_documents_rels_transactions_fk',
    }).onDelete('cascade'),
    'digital-productsIdFk': foreignKey({
      columns: [columns['digital-productsID']],
      foreignColumns: [digital_products.id],
      name: 'payload_locked_documents_rels_digital_products_fk',
    }).onDelete('cascade'),
    addonsIdFk: foreignKey({
      columns: [columns['addonsID']],
      foreignColumns: [addons.id],
      name: 'payload_locked_documents_rels_addons_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    footer_rels_posts_id_idx: index('footer_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'footer_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const streaming_settings = pgTable('streaming_settings', {
  id: serial('id').primaryKey(),
  streamingSourceTypes: enum_streaming_settings_streaming_source_types('streaming_source_types')
    .notNull()
    .default('Both'),
  muxSettings_autoGenerateThumbnails: boolean('mux_settings_auto_generate_thumbnails').default(
    true,
  ),
  muxSettings_defaultPlaybackPolicy: enum_streaming_settings_mux_settings_default_playback_policy(
    'mux_settings_default_playback_policy',
  ).default('public'),
  muxSettings_apiCredentials_tokenId: varchar('mux_settings_api_credentials_token_id'),
  muxSettings_apiCredentials_tokenSecret: varchar('mux_settings_api_credentials_token_secret'),
  muxSettings_apiCredentials_webhookSecret: varchar('mux_settings_api_credentials_webhook_secret'),
  muxSettings_apiCredentials_signingKeyId: varchar('mux_settings_api_credentials_signing_key_id'),
  muxSettings_apiCredentials_signingKeyPrivateKey: varchar(
    'mux_settings_api_credentials_signing_key_private_key',
  ),
  muxSettings_apiCredentials_enableDRMByDefault: boolean(
    'mux_settings_api_credentials_enable_d_r_m_by_default',
  ).default(false),
  muxSettings_apiCredentials_drmConfigurationId: varchar(
    'mux_settings_api_credentials_drm_configuration_id',
  ),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const ott_settings_monetization_plans_features = pgTable(
  'ott_settings_monetization_plans_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature'),
  },
  (columns) => ({
    _orderIdx: index('ott_settings_monetization_plans_features_order_idx').on(columns._order),
    _parentIDIdx: index('ott_settings_monetization_plans_features_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ott_settings_monetization_plans.id],
      name: 'ott_settings_monetization_plans_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const ott_settings_monetization_plans = pgTable(
  'ott_settings_monetization_plans',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    price: numeric('price'),
    interval: enum_ott_settings_monetization_plans_interval('interval').default('month'),
  },
  (columns) => ({
    _orderIdx: index('ott_settings_monetization_plans_order_idx').on(columns._order),
    _parentIDIdx: index('ott_settings_monetization_plans_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ott_settings.id],
      name: 'ott_settings_monetization_plans_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const ott_settings = pgTable(
  'ott_settings',
  {
    id: serial('id').primaryKey(),
    general_siteName: varchar('general_site_name').notNull().default('My OTT Platform'),
    general_siteDescription: varchar('general_site_description'),
    general_logo: integer('general_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    general_favicon: integer('general_favicon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    features_enableMembershipFeatures: boolean('features_enable_membership_features').default(
      false,
    ),
    features_enableDownloads: boolean('features_enable_downloads').default(false),
    features_enableComments: boolean('features_enable_comments').default(true),
    features_enableRatings: boolean('features_enable_ratings').default(true),
    features_enableDeviceLimiting: boolean('features_enable_device_limiting').default(false),
    features_defaultMaxDevices: numeric('features_default_max_devices').default('2'),
    player_autoplay: boolean('player_autoplay').default(false),
    player_enableAutoNext: boolean('player_enable_auto_next').default(true),
    player_defaultPlayerQuality: enum_ott_settings_player_default_player_quality(
      'player_default_player_quality',
    ).default('auto'),
    analytics_googleAnalyticsId: varchar('analytics_google_analytics_id'),
    analytics_enableMuxAnalytics: boolean('analytics_enable_mux_analytics').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    ott_settings_general_general_logo_idx: index('ott_settings_general_general_logo_idx').on(
      columns.general_logo,
    ),
    ott_settings_general_general_favicon_idx: index('ott_settings_general_general_favicon_idx').on(
      columns.general_favicon,
    ),
  }),
)

export const cloud_integrations = pgTable('cloud_integrations', {
  id: serial('id').primaryKey(),
  dropboxAppKey: varchar('dropbox_app_key'),
  googleApiKey: varchar('google_api_key'),
  googleClientId: varchar('google_client_id'),
  onedriveClientId: varchar('onedrive_client_id'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const cloud_storage_settings = pgTable('cloud_storage_settings', {
  id: serial('id').primaryKey(),
  enabled: boolean('enabled').default(false),
  provider: enum_cloud_storage_settings_provider('provider'),
  vercelBlob_token: varchar('vercel_blob_token'),
  vercelBlob_addRandomSuffix: boolean('vercel_blob_add_random_suffix').default(false),
  vercelBlob_cacheControlMaxAge: numeric('vercel_blob_cache_control_max_age').default('31536000'),
  s3_accessKeyId: varchar('s3_access_key_id'),
  s3_secretAccessKey: varchar('s3_secret_access_key'),
  s3_region: varchar('s3_region'),
  s3_bucket: varchar('s3_bucket'),
  s3_endpoint: varchar('s3_endpoint'),
  s3_forcePathStyle: boolean('s3_force_path_style').default(false),
  azure_connectionString: varchar('azure_connection_string'),
  azure_containerName: varchar('azure_container_name'),
  azure_allowContainerCreate: boolean('azure_allow_container_create').default(false),
  azure_baseURL: varchar('azure_base_u_r_l'),
  gcs_projectId: varchar('gcs_project_id'),
  gcs_keyFilename: varchar('gcs_key_filename'),
  gcs_bucket: varchar('gcs_bucket'),
  gcs_credentials: varchar('gcs_credentials'),
  uploadthing_apiKey: varchar('uploadthing_api_key'),
  uploadthing_secretKey: varchar('uploadthing_secret_key'),
  uploadthing_appId: varchar('uploadthing_app_id'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const site_settings = pgTable('site_settings', {
  id: serial('id').primaryKey(),
  siteName: varchar('site_name'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const email_settings = pgTable('email_settings', {
  id: serial('id').primaryKey(),
  resendEnabled: boolean('resend_enabled').default(false),
  resendApiKey: varchar('resend_api_key'),
  resendFromAddress: varchar('resend_from_address'),
  resendFromName: varchar('resend_from_name'),
  adminNotificationEmails: varchar('admin_notification_emails'),
  notifyOnStreamActive: boolean('notify_on_stream_active').default(true),
  notifyOnStreamDisconnected: boolean('notify_on_stream_disconnected').default(true),
  notifyOnRecordingReady: boolean('notify_on_recording_ready').default(true),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const payment_settings_active_payment_methods = pgTable(
  'payment_settings_active_payment_methods',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_payment_settings_active_payment_methods('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('payment_settings_active_payment_methods_order_idx').on(columns.order),
    parentIdx: index('payment_settings_active_payment_methods_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payment_settings.id],
      name: 'payment_settings_active_payment_methods_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const payment_settings_currency_supported_currencies = pgTable(
  'payment_settings_currency_supported_currencies',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_payment_settings_currency_supported_currencies('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('payment_settings_currency_supported_currencies_order_idx').on(columns.order),
    parentIdx: index('payment_settings_currency_supported_currencies_parent_idx').on(
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payment_settings.id],
      name: 'payment_settings_currency_supported_currencies_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const payment_settings = pgTable('payment_settings', {
  id: serial('id').primaryKey(),
  instructions: jsonb('instructions').default(
    sql`'[{"children":[{"text":"Payment Gateway Setup Instructions","bold":true}]},{"children":[{"text":"Configure your payment gateway settings below to enable payments on your platform."}]}]'::jsonb`,
  ),
  stripe_enabled: boolean('stripe_enabled').default(false),
  stripe_testMode: boolean('stripe_test_mode').default(true),
  stripe_accountId: varchar('stripe_account_id'),
  stripe_connected: boolean('stripe_connected').default(false),
  stripe_apiKey: varchar('stripe_api_key'),
  stripe_liveApiKey: varchar('stripe_live_api_key'),
  stripe_publishableKey: varchar('stripe_publishable_key'),
  paypal_enabled: boolean('paypal_enabled').default(false),
  paypal_testMode: boolean('paypal_test_mode').default(true),
  paypal_environment:
    enum_payment_settings_paypal_environment('paypal_environment').default('sandbox'),
  paypal_clientId: varchar('paypal_client_id'),
  paypal_clientSecret: varchar('paypal_client_secret'),
  paypal_connected: boolean('paypal_connected').default(false),
  currency_defaultCurrency: enum_payment_settings_currency_default_currency(
    'currency_default_currency',
  )
    .notNull()
    .default('usd'),
  currency_detectUserCurrency: boolean('currency_detect_user_currency').default(true),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: 'hero_links',
  }),
}))
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories_rels = relations(categories_rels, ({ one }) => ({
  parent: one(categories, {
    fields: [categories_rels.parent],
    references: [categories.id],
    relationName: '_rels',
  }),
  contentID: one(content, {
    fields: [categories_rels.contentID],
    references: [content.id],
    relationName: 'content',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [categories.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  parentCategory: one(categories, {
    fields: [categories.parentCategory],
    references: [categories.id],
    relationName: 'parentCategory',
  }),
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
  meta_image: one(media, {
    fields: [categories.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(categories_rels, {
    relationName: '_rels',
  }),
}))
export const relations_users = relations(users, () => ({}))
export const relations_mux_webhook_jobs = relations(mux_webhook_jobs, () => ({}))
export const relations_videoassets_subtitles_tracks = relations(
  videoassets_subtitles_tracks,
  ({ one }) => ({
    _parentID: one(videoassets, {
      fields: [videoassets_subtitles_tracks._parentID],
      references: [videoassets.id],
      relationName: 'subtitles_tracks',
    }),
  }),
)
export const relations_videoassets = relations(videoassets, ({ one, many }) => ({
  subtitles_tracks: many(videoassets_subtitles_tracks, {
    relationName: 'subtitles_tracks',
  }),
  thumbnail: one(media, {
    fields: [videoassets.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
}))
export const relations_content_bonus_videos = relations(content_bonus_videos, ({ one }) => ({
  _parentID: one(content, {
    fields: [content_bonus_videos._parentID],
    references: [content.id],
    relationName: 'bonusVideos',
  }),
  video: one(videoassets, {
    fields: [content_bonus_videos.video],
    references: [videoassets.id],
    relationName: 'video',
  }),
}))
export const relations_content_tags = relations(content_tags, ({ one }) => ({
  _parentID: one(content, {
    fields: [content_tags._parentID],
    references: [content.id],
    relationName: 'tags',
  }),
}))
export const relations_content_rels = relations(content_rels, ({ one }) => ({
  parent: one(content, {
    fields: [content_rels.parent],
    references: [content.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [content_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  creatorsID: one(creators, {
    fields: [content_rels.creatorsID],
    references: [creators.id],
    relationName: 'creators',
  }),
  'subscription-plansID': one(subscription_plans, {
    fields: [content_rels['subscription-plansID']],
    references: [subscription_plans.id],
    relationName: 'subscription-plans',
  }),
}))
export const relations_content = relations(content, ({ one, many }) => ({
  posterImage: one(media, {
    fields: [content.posterImage],
    references: [media.id],
    relationName: 'posterImage',
  }),
  mainVideo: one(videoassets, {
    fields: [content.mainVideo],
    references: [videoassets.id],
    relationName: 'mainVideo',
  }),
  trailerVideo: one(videoassets, {
    fields: [content.trailerVideo],
    references: [videoassets.id],
    relationName: 'trailerVideo',
  }),
  bonusVideos: many(content_bonus_videos, {
    relationName: 'bonusVideos',
  }),
  tags: many(content_tags, {
    relationName: 'tags',
  }),
  meta_image: one(media, {
    fields: [content.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(content_rels, {
    relationName: '_rels',
  }),
}))
export const relations_creators_social_links = relations(creators_social_links, ({ one }) => ({
  _parentID: one(creators, {
    fields: [creators_social_links._parentID],
    references: [creators.id],
    relationName: 'socialLinks',
  }),
}))
export const relations_creators = relations(creators, ({ one, many }) => ({
  avatar: one(media, {
    fields: [creators.avatar],
    references: [media.id],
    relationName: 'avatar',
  }),
  socialLinks: many(creators_social_links, {
    relationName: 'socialLinks',
  }),
}))
export const relations_series_tags = relations(series_tags, ({ one }) => ({
  _parentID: one(series, {
    fields: [series_tags._parentID],
    references: [series.id],
    relationName: 'tags',
  }),
}))
export const relations_series_rels = relations(series_rels, ({ one }) => ({
  parent: one(series, {
    fields: [series_rels.parent],
    references: [series.id],
    relationName: '_rels',
  }),
  contentID: one(content, {
    fields: [series_rels.contentID],
    references: [content.id],
    relationName: 'content',
  }),
  creatorsID: one(creators, {
    fields: [series_rels.creatorsID],
    references: [creators.id],
    relationName: 'creators',
  }),
  categoriesID: one(categories, {
    fields: [series_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_series = relations(series, ({ one, many }) => ({
  thumbnail: one(media, {
    fields: [series.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
  trailer: one(videoassets, {
    fields: [series.trailer],
    references: [videoassets.id],
    relationName: 'trailer',
  }),
  tags: many(series_tags, {
    relationName: 'tags',
  }),
  meta_image: one(media, {
    fields: [series.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(series_rels, {
    relationName: '_rels',
  }),
}))
export const relations_filters = relations(filters, () => ({}))
export const relations_carousels_items = relations(carousels_items, ({ one }) => ({
  _parentID: one(carousels, {
    fields: [carousels_items._parentID],
    references: [carousels.id],
    relationName: 'items',
  }),
}))
export const relations_carousels_show_on_pages = relations(carousels_show_on_pages, ({ one }) => ({
  parent: one(carousels, {
    fields: [carousels_show_on_pages.parent],
    references: [carousels.id],
    relationName: 'showOnPages',
  }),
}))
export const relations_carousels_rels = relations(carousels_rels, ({ one }) => ({
  parent: one(carousels, {
    fields: [carousels_rels.parent],
    references: [carousels.id],
    relationName: '_rels',
  }),
  contentID: one(content, {
    fields: [carousels_rels.contentID],
    references: [content.id],
    relationName: 'content',
  }),
  seriesID: one(series, {
    fields: [carousels_rels.seriesID],
    references: [series.id],
    relationName: 'series',
  }),
}))
export const relations_carousels = relations(carousels, ({ many }) => ({
  items: many(carousels_items, {
    relationName: 'items',
  }),
  showOnPages: many(carousels_show_on_pages, {
    relationName: 'showOnPages',
  }),
  _rels: many(carousels_rels, {
    relationName: '_rels',
  }),
}))
export const relations_live_events_ppv_prices_by_currency = relations(
  live_events_ppv_prices_by_currency,
  ({ one }) => ({
    _parentID: one(live_events, {
      fields: [live_events_ppv_prices_by_currency._parentID],
      references: [live_events.id],
      relationName: 'ppvPricesByCurrency',
    }),
  }),
)
export const relations_live_events_rental_prices_by_currency = relations(
  live_events_rental_prices_by_currency,
  ({ one }) => ({
    _parentID: one(live_events, {
      fields: [live_events_rental_prices_by_currency._parentID],
      references: [live_events.id],
      relationName: 'rentalPricesByCurrency',
    }),
  }),
)
export const relations_live_events_mux_playback_ids = relations(
  live_events_mux_playback_ids,
  ({ one }) => ({
    _parentID: one(live_events, {
      fields: [live_events_mux_playback_ids._parentID],
      references: [live_events.id],
      relationName: 'muxPlaybackIds',
    }),
  }),
)
export const relations_live_events_simulcast_targets = relations(
  live_events_simulcast_targets,
  ({ one }) => ({
    _parentID: one(live_events, {
      fields: [live_events_simulcast_targets._parentID],
      references: [live_events.id],
      relationName: 'simulcastTargets',
    }),
  }),
)
export const relations_live_events_rels = relations(live_events_rels, ({ one }) => ({
  parent: one(live_events, {
    fields: [live_events_rels.parent],
    references: [live_events.id],
    relationName: '_rels',
  }),
  recordingsID: one(recordings, {
    fields: [live_events_rels.recordingsID],
    references: [recordings.id],
    relationName: 'recordings',
  }),
  'live-event-registrationsID': one(live_event_registrations, {
    fields: [live_events_rels['live-event-registrationsID']],
    references: [live_event_registrations.id],
    relationName: 'live-event-registrations',
  }),
  'subscription-plansID': one(subscription_plans, {
    fields: [live_events_rels['subscription-plansID']],
    references: [subscription_plans.id],
    relationName: 'subscription-plans',
  }),
}))
export const relations_live_events = relations(live_events, ({ one, many }) => ({
  thumbnail: one(media, {
    fields: [live_events.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
  simulatedLiveAssetId: one(recordings, {
    fields: [live_events.simulatedLiveAssetId],
    references: [recordings.id],
    relationName: 'simulatedLiveAssetId',
  }),
  ppvPricesByCurrency: many(live_events_ppv_prices_by_currency, {
    relationName: 'ppvPricesByCurrency',
  }),
  rentalPricesByCurrency: many(live_events_rental_prices_by_currency, {
    relationName: 'rentalPricesByCurrency',
  }),
  muxPlaybackIds: many(live_events_mux_playback_ids, {
    relationName: 'muxPlaybackIds',
  }),
  simulcastTargets: many(live_events_simulcast_targets, {
    relationName: 'simulcastTargets',
  }),
  _rels: many(live_events_rels, {
    relationName: '_rels',
  }),
}))
export const relations_recordings = relations(recordings, ({ one }) => ({
  liveEvent: one(live_events, {
    fields: [recordings.liveEvent],
    references: [live_events.id],
    relationName: 'liveEvent',
  }),
}))
export const relations_live_event_registrations = relations(
  live_event_registrations,
  ({ one }) => ({
    liveEvent: one(live_events, {
      fields: [live_event_registrations.liveEvent],
      references: [live_events.id],
      relationName: 'liveEvent',
    }),
  }),
)
export const relations_notifications = relations(notifications, ({ one }) => ({
  relatedLiveEvent: one(live_events, {
    fields: [notifications.relatedLiveEvent],
    references: [live_events.id],
    relationName: 'relatedLiveEvent',
  }),
}))
export const relations_subscribers_rental_expirations = relations(
  subscribers_rental_expirations,
  ({ one }) => ({
    _parentID: one(subscribers, {
      fields: [subscribers_rental_expirations._parentID],
      references: [subscribers.id],
      relationName: 'rentalExpirations',
    }),
    contentId: one(content, {
      fields: [subscribers_rental_expirations.contentId],
      references: [content.id],
      relationName: 'contentId',
    }),
  }),
)
export const relations_subscribers_event_rental_expirations = relations(
  subscribers_event_rental_expirations,
  ({ one }) => ({
    _parentID: one(subscribers, {
      fields: [subscribers_event_rental_expirations._parentID],
      references: [subscribers.id],
      relationName: 'eventRentalExpirations',
    }),
    eventId: one(live_events, {
      fields: [subscribers_event_rental_expirations.eventId],
      references: [live_events.id],
      relationName: 'eventId',
    }),
  }),
)
export const relations_subscribers_active_recurring_add_ons = relations(
  subscribers_active_recurring_add_ons,
  ({ one }) => ({
    _parentID: one(subscribers, {
      fields: [subscribers_active_recurring_add_ons._parentID],
      references: [subscribers.id],
      relationName: 'activeRecurringAddOns',
    }),
    addon: one(addons, {
      fields: [subscribers_active_recurring_add_ons.addon],
      references: [addons.id],
      relationName: 'addon',
    }),
  }),
)
export const relations_subscribers_manually_granted_rentals = relations(
  subscribers_manually_granted_rentals,
  ({ one }) => ({
    _parentID: one(subscribers, {
      fields: [subscribers_manually_granted_rentals._parentID],
      references: [subscribers.id],
      relationName: 'manuallyGrantedRentals',
    }),
    event: one(live_events, {
      fields: [subscribers_manually_granted_rentals.event],
      references: [live_events.id],
      relationName: 'event',
    }),
  }),
)
export const relations_subscribers_active_sessions = relations(
  subscribers_active_sessions,
  ({ one }) => ({
    _parentID: one(subscribers, {
      fields: [subscribers_active_sessions._parentID],
      references: [subscribers.id],
      relationName: 'activeSessions',
    }),
  }),
)
export const relations_subscribers_rels = relations(subscribers_rels, ({ one }) => ({
  parent: one(subscribers, {
    fields: [subscribers_rels.parent],
    references: [subscribers.id],
    relationName: '_rels',
  }),
  'subscription-plansID': one(subscription_plans, {
    fields: [subscribers_rels['subscription-plansID']],
    references: [subscription_plans.id],
    relationName: 'subscription-plans',
  }),
  contentID: one(content, {
    fields: [subscribers_rels.contentID],
    references: [content.id],
    relationName: 'content',
  }),
  'live-eventsID': one(live_events, {
    fields: [subscribers_rels['live-eventsID']],
    references: [live_events.id],
    relationName: 'live-events',
  }),
  'digital-productsID': one(digital_products, {
    fields: [subscribers_rels['digital-productsID']],
    references: [digital_products.id],
    relationName: 'digital-products',
  }),
  addonsID: one(addons, {
    fields: [subscribers_rels.addonsID],
    references: [addons.id],
    relationName: 'addons',
  }),
}))
export const relations_subscribers = relations(subscribers, ({ one, many }) => ({
  rentalExpirations: many(subscribers_rental_expirations, {
    relationName: 'rentalExpirations',
  }),
  eventRentalExpirations: many(subscribers_event_rental_expirations, {
    relationName: 'eventRentalExpirations',
  }),
  activeRecurringAddOns: many(subscribers_active_recurring_add_ons, {
    relationName: 'activeRecurringAddOns',
  }),
  manuallyGrantedRentals: many(subscribers_manually_granted_rentals, {
    relationName: 'manuallyGrantedRentals',
  }),
  activeSessions: many(subscribers_active_sessions, {
    relationName: 'activeSessions',
  }),
  user: one(users, {
    fields: [subscribers.user],
    references: [users.id],
    relationName: 'user',
  }),
  _rels: many(subscribers_rels, {
    relationName: '_rels',
  }),
}))
export const relations_subscription_plans_prices_by_currency = relations(
  subscription_plans_prices_by_currency,
  ({ one }) => ({
    _parentID: one(subscription_plans, {
      fields: [subscription_plans_prices_by_currency._parentID],
      references: [subscription_plans.id],
      relationName: 'pricesByCurrency',
    }),
  }),
)
export const relations_subscription_plans_features = relations(
  subscription_plans_features,
  ({ one }) => ({
    _parentID: one(subscription_plans, {
      fields: [subscription_plans_features._parentID],
      references: [subscription_plans.id],
      relationName: 'features',
    }),
  }),
)
export const relations_subscription_plans = relations(subscription_plans, ({ many }) => ({
  pricesByCurrency: many(subscription_plans_prices_by_currency, {
    relationName: 'pricesByCurrency',
  }),
  features: many(subscription_plans_features, {
    relationName: 'features',
  }),
}))
export const relations_discount_codes_limit_to = relations(discount_codes_limit_to, ({ one }) => ({
  parent: one(discount_codes, {
    fields: [discount_codes_limit_to.parent],
    references: [discount_codes.id],
    relationName: 'limitTo',
  }),
}))
export const relations_discount_codes = relations(discount_codes, ({ many }) => ({
  limitTo: many(discount_codes_limit_to, {
    relationName: 'limitTo',
  }),
}))
export const relations_transactions = relations(transactions, ({ one }) => ({
  subscriber: one(subscribers, {
    fields: [transactions.subscriber],
    references: [subscribers.id],
    relationName: 'subscriber',
  }),
  event: one(live_events, {
    fields: [transactions.event],
    references: [live_events.id],
    relationName: 'event',
  }),
  content: one(content, {
    fields: [transactions.content],
    references: [content.id],
    relationName: 'content',
  }),
  plan: one(subscription_plans, {
    fields: [transactions.plan],
    references: [subscription_plans.id],
    relationName: 'plan',
  }),
  product: one(digital_products, {
    fields: [transactions.product],
    references: [digital_products.id],
    relationName: 'product',
  }),
}))
export const relations_digital_products_prices_by_currency = relations(
  digital_products_prices_by_currency,
  ({ one }) => ({
    _parentID: one(digital_products, {
      fields: [digital_products_prices_by_currency._parentID],
      references: [digital_products.id],
      relationName: 'pricesByCurrency',
    }),
  }),
)
export const relations_digital_products = relations(digital_products, ({ one, many }) => ({
  pricesByCurrency: many(digital_products_prices_by_currency, {
    relationName: 'pricesByCurrency',
  }),
  thumbnail: one(media, {
    fields: [digital_products.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
}))
export const relations_addons_prices_by_currency = relations(
  addons_prices_by_currency,
  ({ one }) => ({
    _parentID: one(addons, {
      fields: [addons_prices_by_currency._parentID],
      references: [addons.id],
      relationName: 'pricesByCurrency',
    }),
  }),
)
export const relations_addons = relations(addons, ({ many }) => ({
  pricesByCurrency: many(addons_prices_by_currency, {
    relationName: 'pricesByCurrency',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    'mux-webhook-jobsID': one(mux_webhook_jobs, {
      fields: [payload_locked_documents_rels['mux-webhook-jobsID']],
      references: [mux_webhook_jobs.id],
      relationName: 'mux-webhook-jobs',
    }),
    videoassetsID: one(videoassets, {
      fields: [payload_locked_documents_rels.videoassetsID],
      references: [videoassets.id],
      relationName: 'videoassets',
    }),
    contentID: one(content, {
      fields: [payload_locked_documents_rels.contentID],
      references: [content.id],
      relationName: 'content',
    }),
    creatorsID: one(creators, {
      fields: [payload_locked_documents_rels.creatorsID],
      references: [creators.id],
      relationName: 'creators',
    }),
    seriesID: one(series, {
      fields: [payload_locked_documents_rels.seriesID],
      references: [series.id],
      relationName: 'series',
    }),
    filtersID: one(filters, {
      fields: [payload_locked_documents_rels.filtersID],
      references: [filters.id],
      relationName: 'filters',
    }),
    carouselsID: one(carousels, {
      fields: [payload_locked_documents_rels.carouselsID],
      references: [carousels.id],
      relationName: 'carousels',
    }),
    'live-eventsID': one(live_events, {
      fields: [payload_locked_documents_rels['live-eventsID']],
      references: [live_events.id],
      relationName: 'live-events',
    }),
    recordingsID: one(recordings, {
      fields: [payload_locked_documents_rels.recordingsID],
      references: [recordings.id],
      relationName: 'recordings',
    }),
    'live-event-registrationsID': one(live_event_registrations, {
      fields: [payload_locked_documents_rels['live-event-registrationsID']],
      references: [live_event_registrations.id],
      relationName: 'live-event-registrations',
    }),
    notificationsID: one(notifications, {
      fields: [payload_locked_documents_rels.notificationsID],
      references: [notifications.id],
      relationName: 'notifications',
    }),
    subscribersID: one(subscribers, {
      fields: [payload_locked_documents_rels.subscribersID],
      references: [subscribers.id],
      relationName: 'subscribers',
    }),
    'subscription-plansID': one(subscription_plans, {
      fields: [payload_locked_documents_rels['subscription-plansID']],
      references: [subscription_plans.id],
      relationName: 'subscription-plans',
    }),
    'discount-codesID': one(discount_codes, {
      fields: [payload_locked_documents_rels['discount-codesID']],
      references: [discount_codes.id],
      relationName: 'discount-codes',
    }),
    transactionsID: one(transactions, {
      fields: [payload_locked_documents_rels.transactionsID],
      references: [transactions.id],
      relationName: 'transactions',
    }),
    'digital-productsID': one(digital_products, {
      fields: [payload_locked_documents_rels['digital-productsID']],
      references: [digital_products.id],
      relationName: 'digital-products',
    }),
    addonsID: one(addons, {
      fields: [payload_locked_documents_rels.addonsID],
      references: [addons.id],
      relationName: 'addons',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))
export const relations_streaming_settings = relations(streaming_settings, () => ({}))
export const relations_ott_settings_monetization_plans_features = relations(
  ott_settings_monetization_plans_features,
  ({ one }) => ({
    _parentID: one(ott_settings_monetization_plans, {
      fields: [ott_settings_monetization_plans_features._parentID],
      references: [ott_settings_monetization_plans.id],
      relationName: 'features',
    }),
  }),
)
export const relations_ott_settings_monetization_plans = relations(
  ott_settings_monetization_plans,
  ({ one, many }) => ({
    _parentID: one(ott_settings, {
      fields: [ott_settings_monetization_plans._parentID],
      references: [ott_settings.id],
      relationName: 'monetization_plans',
    }),
    features: many(ott_settings_monetization_plans_features, {
      relationName: 'features',
    }),
  }),
)
export const relations_ott_settings = relations(ott_settings, ({ one, many }) => ({
  general_logo: one(media, {
    fields: [ott_settings.general_logo],
    references: [media.id],
    relationName: 'general_logo',
  }),
  general_favicon: one(media, {
    fields: [ott_settings.general_favicon],
    references: [media.id],
    relationName: 'general_favicon',
  }),
  monetization_plans: many(ott_settings_monetization_plans, {
    relationName: 'monetization_plans',
  }),
}))
export const relations_cloud_integrations = relations(cloud_integrations, () => ({}))
export const relations_cloud_storage_settings = relations(cloud_storage_settings, () => ({}))
export const relations_site_settings = relations(site_settings, () => ({}))
export const relations_email_settings = relations(email_settings, () => ({}))
export const relations_payment_settings_active_payment_methods = relations(
  payment_settings_active_payment_methods,
  ({ one }) => ({
    parent: one(payment_settings, {
      fields: [payment_settings_active_payment_methods.parent],
      references: [payment_settings.id],
      relationName: 'activePaymentMethods',
    }),
  }),
)
export const relations_payment_settings_currency_supported_currencies = relations(
  payment_settings_currency_supported_currencies,
  ({ one }) => ({
    parent: one(payment_settings, {
      fields: [payment_settings_currency_supported_currencies.parent],
      references: [payment_settings.id],
      relationName: 'currency_supportedCurrencies',
    }),
  }),
)
export const relations_payment_settings = relations(payment_settings, ({ many }) => ({
  activePaymentMethods: many(payment_settings_active_payment_methods, {
    relationName: 'activePaymentMethods',
  }),
  currency_supportedCurrencies: many(payment_settings_currency_supported_currencies, {
    relationName: 'currency_supportedCurrencies',
  }),
}))

type DatabaseSchema = {
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_hero_type: typeof enum_pages_hero_type
  enum_pages_meta_social_media_twitter_card: typeof enum_pages_meta_social_media_twitter_card
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
  enum__pages_v_version_meta_social_media_twitter_card: typeof enum__pages_v_version_meta_social_media_twitter_card
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_posts_meta_social_media_twitter_card: typeof enum_posts_meta_social_media_twitter_card
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_meta_social_media_twitter_card: typeof enum__posts_v_version_meta_social_media_twitter_card
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_categories_featured_on: typeof enum_categories_featured_on
  enum_categories_meta_social_media_twitter_card: typeof enum_categories_meta_social_media_twitter_card
  enum_mux_webhook_jobs_status: typeof enum_mux_webhook_jobs_status
  enum_videoassets_subtitles_tracks_kind: typeof enum_videoassets_subtitles_tracks_kind
  enum_videoassets_source_type: typeof enum_videoassets_source_type
  enum_videoassets_mux_data_status: typeof enum_videoassets_mux_data_status
  enum_videoassets_mux_advanced_settings_video_quality: typeof enum_videoassets_mux_advanced_settings_video_quality
  enum_videoassets_mux_advanced_settings_max_resolution: typeof enum_videoassets_mux_advanced_settings_max_resolution
  enum_videoassets_mux_advanced_settings_playback_policy: typeof enum_videoassets_mux_advanced_settings_playback_policy
  enum_content_status: typeof enum_content_status
  enum_content_meta_social_media_twitter_card: typeof enum_content_meta_social_media_twitter_card
  enum_creators_social_links_platform: typeof enum_creators_social_links_platform
  enum_series_layout: typeof enum_series_layout
  enum_series_meta_social_media_twitter_card: typeof enum_series_meta_social_media_twitter_card
  enum_filters_type: typeof enum_filters_type
  enum_carousels_items_item_type: typeof enum_carousels_items_item_type
  enum_carousels_show_on_pages: typeof enum_carousels_show_on_pages
  enum_carousels_display_options_layout: typeof enum_carousels_display_options_layout
  enum_carousels_display_options_items_per_view: typeof enum_carousels_display_options_items_per_view
  enum_live_events_ppv_prices_by_currency_currency: typeof enum_live_events_ppv_prices_by_currency_currency
  enum_live_events_rental_prices_by_currency_currency: typeof enum_live_events_rental_prices_by_currency_currency
  enum_live_events_simulcast_targets_status: typeof enum_live_events_simulcast_targets_status
  enum_live_events_playback_policy: typeof enum_live_events_playback_policy
  enum_live_events_status: typeof enum_live_events_status
  enum_live_events_access_type: typeof enum_live_events_access_type
  enum_live_events_mux_status: typeof enum_live_events_mux_status
  enum_recordings_playback_policy: typeof enum_recordings_playback_policy
  enum_notifications_type: typeof enum_notifications_type
  enum_subscribers_active_recurring_add_ons_status: typeof enum_subscribers_active_recurring_add_ons_status
  enum_subscribers_payment_provider: typeof enum_subscribers_payment_provider
  enum_subscribers_subscription_status: typeof enum_subscribers_subscription_status
  enum_subscription_plans_prices_by_currency_currency: typeof enum_subscription_plans_prices_by_currency_currency
  enum_subscription_plans_interval: typeof enum_subscription_plans_interval
  enum_subscription_plans_payment_provider: typeof enum_subscription_plans_payment_provider
  enum_discount_codes_limit_to: typeof enum_discount_codes_limit_to
  enum_discount_codes_type: typeof enum_discount_codes_type
  enum_transactions_type: typeof enum_transactions_type
  enum_transactions_payment_provider: typeof enum_transactions_payment_provider
  enum_transactions_status: typeof enum_transactions_status
  enum_digital_products_prices_by_currency_currency: typeof enum_digital_products_prices_by_currency_currency
  enum_addons_prices_by_currency_currency: typeof enum_addons_prices_by_currency_currency
  enum_addons_type: typeof enum_addons_type
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  enum_streaming_settings_streaming_source_types: typeof enum_streaming_settings_streaming_source_types
  enum_streaming_settings_mux_settings_default_playback_policy: typeof enum_streaming_settings_mux_settings_default_playback_policy
  enum_ott_settings_monetization_plans_interval: typeof enum_ott_settings_monetization_plans_interval
  enum_ott_settings_player_default_player_quality: typeof enum_ott_settings_player_default_player_quality
  enum_cloud_storage_settings_provider: typeof enum_cloud_storage_settings_provider
  enum_payment_settings_active_payment_methods: typeof enum_payment_settings_active_payment_methods
  enum_payment_settings_currency_supported_currencies: typeof enum_payment_settings_currency_supported_currencies
  enum_payment_settings_paypal_environment: typeof enum_payment_settings_paypal_environment
  enum_payment_settings_currency_default_currency: typeof enum_payment_settings_currency_default_currency
  pages_hero_links: typeof pages_hero_links
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  media: typeof media
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  categories_rels: typeof categories_rels
  users: typeof users
  mux_webhook_jobs: typeof mux_webhook_jobs
  videoassets_subtitles_tracks: typeof videoassets_subtitles_tracks
  videoassets: typeof videoassets
  content_bonus_videos: typeof content_bonus_videos
  content_tags: typeof content_tags
  content: typeof content
  content_rels: typeof content_rels
  creators_social_links: typeof creators_social_links
  creators: typeof creators
  series_tags: typeof series_tags
  series: typeof series
  series_rels: typeof series_rels
  filters: typeof filters
  carousels_items: typeof carousels_items
  carousels_show_on_pages: typeof carousels_show_on_pages
  carousels: typeof carousels
  carousels_rels: typeof carousels_rels
  live_events_ppv_prices_by_currency: typeof live_events_ppv_prices_by_currency
  live_events_rental_prices_by_currency: typeof live_events_rental_prices_by_currency
  live_events_mux_playback_ids: typeof live_events_mux_playback_ids
  live_events_simulcast_targets: typeof live_events_simulcast_targets
  live_events: typeof live_events
  live_events_rels: typeof live_events_rels
  recordings: typeof recordings
  live_event_registrations: typeof live_event_registrations
  notifications: typeof notifications
  subscribers_rental_expirations: typeof subscribers_rental_expirations
  subscribers_event_rental_expirations: typeof subscribers_event_rental_expirations
  subscribers_active_recurring_add_ons: typeof subscribers_active_recurring_add_ons
  subscribers_manually_granted_rentals: typeof subscribers_manually_granted_rentals
  subscribers_active_sessions: typeof subscribers_active_sessions
  subscribers: typeof subscribers
  subscribers_rels: typeof subscribers_rels
  subscription_plans_prices_by_currency: typeof subscription_plans_prices_by_currency
  subscription_plans_features: typeof subscription_plans_features
  subscription_plans: typeof subscription_plans
  discount_codes_limit_to: typeof discount_codes_limit_to
  discount_codes: typeof discount_codes
  transactions: typeof transactions
  digital_products_prices_by_currency: typeof digital_products_prices_by_currency
  digital_products: typeof digital_products
  addons_prices_by_currency: typeof addons_prices_by_currency
  addons: typeof addons
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  streaming_settings: typeof streaming_settings
  ott_settings_monetization_plans_features: typeof ott_settings_monetization_plans_features
  ott_settings_monetization_plans: typeof ott_settings_monetization_plans
  ott_settings: typeof ott_settings
  cloud_integrations: typeof cloud_integrations
  cloud_storage_settings: typeof cloud_storage_settings
  site_settings: typeof site_settings
  email_settings: typeof email_settings
  payment_settings_active_payment_methods: typeof payment_settings_active_payment_methods
  payment_settings_currency_supported_currencies: typeof payment_settings_currency_supported_currencies
  payment_settings: typeof payment_settings
  relations_pages_hero_links: typeof relations_pages_hero_links
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_media: typeof relations_media
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories_rels: typeof relations_categories_rels
  relations_categories: typeof relations_categories
  relations_users: typeof relations_users
  relations_mux_webhook_jobs: typeof relations_mux_webhook_jobs
  relations_videoassets_subtitles_tracks: typeof relations_videoassets_subtitles_tracks
  relations_videoassets: typeof relations_videoassets
  relations_content_bonus_videos: typeof relations_content_bonus_videos
  relations_content_tags: typeof relations_content_tags
  relations_content_rels: typeof relations_content_rels
  relations_content: typeof relations_content
  relations_creators_social_links: typeof relations_creators_social_links
  relations_creators: typeof relations_creators
  relations_series_tags: typeof relations_series_tags
  relations_series_rels: typeof relations_series_rels
  relations_series: typeof relations_series
  relations_filters: typeof relations_filters
  relations_carousels_items: typeof relations_carousels_items
  relations_carousels_show_on_pages: typeof relations_carousels_show_on_pages
  relations_carousels_rels: typeof relations_carousels_rels
  relations_carousels: typeof relations_carousels
  relations_live_events_ppv_prices_by_currency: typeof relations_live_events_ppv_prices_by_currency
  relations_live_events_rental_prices_by_currency: typeof relations_live_events_rental_prices_by_currency
  relations_live_events_mux_playback_ids: typeof relations_live_events_mux_playback_ids
  relations_live_events_simulcast_targets: typeof relations_live_events_simulcast_targets
  relations_live_events_rels: typeof relations_live_events_rels
  relations_live_events: typeof relations_live_events
  relations_recordings: typeof relations_recordings
  relations_live_event_registrations: typeof relations_live_event_registrations
  relations_notifications: typeof relations_notifications
  relations_subscribers_rental_expirations: typeof relations_subscribers_rental_expirations
  relations_subscribers_event_rental_expirations: typeof relations_subscribers_event_rental_expirations
  relations_subscribers_active_recurring_add_ons: typeof relations_subscribers_active_recurring_add_ons
  relations_subscribers_manually_granted_rentals: typeof relations_subscribers_manually_granted_rentals
  relations_subscribers_active_sessions: typeof relations_subscribers_active_sessions
  relations_subscribers_rels: typeof relations_subscribers_rels
  relations_subscribers: typeof relations_subscribers
  relations_subscription_plans_prices_by_currency: typeof relations_subscription_plans_prices_by_currency
  relations_subscription_plans_features: typeof relations_subscription_plans_features
  relations_subscription_plans: typeof relations_subscription_plans
  relations_discount_codes_limit_to: typeof relations_discount_codes_limit_to
  relations_discount_codes: typeof relations_discount_codes
  relations_transactions: typeof relations_transactions
  relations_digital_products_prices_by_currency: typeof relations_digital_products_prices_by_currency
  relations_digital_products: typeof relations_digital_products
  relations_addons_prices_by_currency: typeof relations_addons_prices_by_currency
  relations_addons: typeof relations_addons
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
  relations_streaming_settings: typeof relations_streaming_settings
  relations_ott_settings_monetization_plans_features: typeof relations_ott_settings_monetization_plans_features
  relations_ott_settings_monetization_plans: typeof relations_ott_settings_monetization_plans
  relations_ott_settings: typeof relations_ott_settings
  relations_cloud_integrations: typeof relations_cloud_integrations
  relations_cloud_storage_settings: typeof relations_cloud_storage_settings
  relations_site_settings: typeof relations_site_settings
  relations_email_settings: typeof relations_email_settings
  relations_payment_settings_active_payment_methods: typeof relations_payment_settings_active_payment_methods
  relations_payment_settings_currency_supported_currencies: typeof relations_payment_settings_currency_supported_currencies
  relations_payment_settings: typeof relations_payment_settings
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
