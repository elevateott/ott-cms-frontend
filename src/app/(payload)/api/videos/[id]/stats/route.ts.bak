// src/app/api/videos/[id]/stats/route.ts
import { getPayload } from 'payload'
import configPromise from '@payload-config'
import { NextRequest, NextResponse } from 'next/server'
// No need for the utility function anymore

export async function GET(req: NextRequest, context: { params: { id: string } }) {
  try {
    const { id } = context.params
    const payload = await getPayload({ config: configPromise })

    // Authenticate the request
    const { user } = await payload.auth({ headers: req.headers })

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Verify the video exists
    const video = await payload.findByID({
      collection: 'videos',
      id,
    })

    if (!video) {
      return NextResponse.json({ error: 'Video not found' }, { status: 404 })
    }

    // In a real application, you would fetch actual analytics data from your database
    // or from Mux's Video Analytics API if using Mux
    // Here we're generating mock data for demonstration purposes

    // Generate 7 days of random view data
    const daily = Array.from({ length: 7 }, (_, i) => {
      const date = new Date()
      date.setDate(date.getDate() - (6 - i))

      return {
        date: date.toISOString().split('T')[0],
        views: Math.floor(Math.random() * 100) + 10,
      }
    })

    // Calculate total views
    const totalViews = daily.reduce((sum, day) => sum + day.views, 0)

    // Generate mock engagement data
    const averageWatchTime = Math.random() * (video.duration || 300) * 0.7
    const completionRate = Math.random() * 0.8 + 0.1 // Between 10% and 90%

    return NextResponse.json({
      views: {
        total: totalViews,
        daily,
      },
      engagement: {
        averageWatchTime,
        completionRate,
      },
    })
  } catch (error: unknown) {
    console.error('Error fetching video stats:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    return NextResponse.json(
      { error: `Failed to fetch video statistics: ${errorMessage}` },
      { status: 500 },
    )
  }
}
