URL: https://payloadcms.com/docs/getting-started/what-is-payload

Payload is the Next.js fullstack framework. Write a Payload Config and instantly get:
No matter what you're building, Payload will give you backend superpowers. Your entire Payload config can be installed in one line into any existing Next.js app, and is designed to catapult your development process. Payload takes the most complex and time-consuming parts of any modern web app and makes them simple.
It's fully open source with an MIT license and you can self-host anywhere that you can run a Node.js app. You can also deploy serverless to hosts like Vercel, right inside your existing Next.js application.
In Payload, there are no "click ops" - as in clicking around in an Admin Panel to define your schema. In Payload, everything is done the right way—code-first and version controlled like a proper backend. But once developers define how Payload should work, non-technical users can independently make use of its Admin Panel to manage whatever they need to without having to know code whatsoever.
Even in spite of how much you get out of the box, you still have full control over every aspect of your app - be it database, admin UI, or anything else. Every part of Payload has been designed to be extensible and customizable with modern TypeScript / React. And you'll fully understand the code that you write.
Payload started as a headless Content Management System (CMS), but since, we've seen our community leverage Payload in ways far outside of simply managing pages and blog posts. It's grown into a full-stack TypeScript app framework.
Large enterprises use Payload to power significant internal tools, retailers power their entire storefronts without the need for headless Shopify, and massive amounts of digital assets are stored + managed within Payload. Of course, websites large and small still use Payload for content management as well.
The biggest barrier in large web projects cited by marketers is engineering. On the flip side, engineers say the opposite. This is a big problem that has yet to be solved even though we have countless CMS options.
Payload has restored a little love back into the dev / marketer equation with features like Live Preview, redirects, form builders, visual editing, static A/B testing, and more. But even with all this focus on marketing efficiency, we aren't compromising on the developer experience. That way engineers and marketers alike can be proud of the products they build.
If you're building a website and your frontend is on Next.js, then Payload is a no-brainer.
Instead of going out and signing up for a SaaS vendor that makes it so you have to manage two completely separate concerns, with little to no native connection back and forth, just install Payload in your existing Next.js repo and instantly get a full CMS.
Get started with Payload as a CMS using our official Website template:
When a large organization starts up a new software initiative, there's a lot of plumbing to take care of.
And then there's the Admin Panel. Most enterprise tools require an admin UI, and building one from scratch can be the most time-consuming aspect of any new enterprise tool. There are off-the-shelf packages for app frameworks like Rails, but often the customization is so involved that using Material UI or similar from scratch might be better.
Then there are no-code admin builders that could be used. However, wiring up access control and the connection to the data layer, with proper version control, makes this a challenging task as well.
That's where Payload comes in. Payload instantly provides all of this out of the box, making complex internal tools extremely simple to both spin up and maintain over time. The only custom code that will need to be written is any custom business logic. That means Payload can expedite timelines, keep budgets low, and allow engineers to focus on their specific requirements rather than complex backend / admin UI plumbing.
Generally, the best place to start for a new enterprise tool is with a blank canvas, where you can define your own functionality:
Companies who prioritize UX generally run into frontend constraints with traditional commerce vendors. These companies will then opt for frontend frameworks like Next.js which allow them to fine-tune their user experience as much as possible—promoting conversions, personalizing experiences, and optimizing for SEO.
But the challenge with using something like Next.js for headless commerce is that in order for non-technical users to manage the storefront, you instantly need to pair a headless commerce product with a headless CMS. Then, your editors need to bounce back and forth between different admin UIs for different functionality. The code required to seamlessly glue them together on the frontend becomes overly complex.
Payload can integrate with any payment processor like Stripe and its content authoring capabilities allow it to manage every aspect of a storefront—all in one place.
If you can build your storefront with a single backend, and only offload things like payment processing, the code will be simpler and the editing experience will be significantly streamlined. Manage products, catalogs, page content, media, and more—all in one spot.
Payload's API-first tagging, sorting, and querying engine lends itself perfectly to all types of content that a CMS might ordinarily store, but these strong fundamentals also make it a formidable Digital Asset Management (DAM) tool as well.
Similarly to the Ecommerce use case above, if an organization uses a CMS for its content but a separate DAM for its digital assets, administrators of both tools will need to juggle completely different services for tasks that are closely related. Two subscriptions will need to be managed, two sets of infrastructure will need to be provisioned, and two admin UIs need to be used / learned.
Payload flattens CMS and DAM into a single tool that makes no compromises on either side. Powerful features like folder-based organization, file versioning, bulk upload, and media access control allow Payload to simultaneously function as a full Digital Asset Management platform as well as a Content Management System at the same time.
Click here for more information on how to get started with Payload as a DAM.
Payload is a great choice for applications of all sizes and types, but it might not be the right choice for every project. Here are some guidelines to help you decide if Payload is the right choice for your project.
Ready to get started? First, let's review some high-level concepts that are used in Payload.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/configuration/overview

Payload is a config-based, code-first CMS and application framework. The Payload Config is central to everything that Payload does, allowing for deep configuration of your application through a simple and intuitive API. The Payload Config is a fully-typed JavaScript object that can be infinitely extended upon.
Everything from your Database choice to the appearance of the Admin Panel is fully controlled through the Payload Config. From here you can define Fields, add Localization, enable Authentication, configure Access Control, and so much more.
The Payload Config is a payload.config.ts file typically located in the root of your project:
The Payload Config is strongly typed and ties directly into Payload's TypeScript codebase. This means your IDE (such as VSCode) will provide helpful information like type-ahead suggestions while you write your config.
Tip: The location of your Payload Config can be customized. More details.
To author your Payload Config, first determine which Database you'd like to use, then use Collections or Globals to define the schema of your data through Fields.
Here is one of the simplest possible Payload configs:
Note: For more complex examples, see the Templates and Examples directories in the Payload repository.
The following options are available:
 Option                     
 Description                                                                                                                                                                                    
 admin 
 The configuration options for the Admin Panel, including Custom Components, Live Preview, etc. More details.                                                
 bin 
 Register custom bin scripts for Payload to execute. More Details.                                                                                                       
 editor 
 The Rich Text Editor which will be used by richText fields. More details.                                                                                           
 db *                
 The Database Adapter which will be used by Payload. More details.                                                                                                      
 serverURL 
 A string used to define the absolute URL of your app. This includes the protocol, for example https://example.com. No paths allowed, only protocol, domain and (optionally) port.            
 collections 
 An array of Collections for Payload to manage. More details.                                                                                                                  
 compatibility 
 Compatibility flags for earlier versions of Payload. More details.                                                                                                     
 globals 
 An array of Globals for Payload to manage. More details.                                                                                                                          
 cors 
 Cross-origin resource sharing (CORS) is a mechanism that accept incoming requests from given domains. You can also customize the Access-Control-Allow-Headers header. More details. 
 localization 
 Opt-in to translate your content into multiple locales. More details.                                                                                                        
 logger 
 Logger options, logger options with a destination stream, or an instantiated logger instance. More details.                                        
 loggingLevels 
 An object to override the level to use in the logger for Payload's errors.                                                                                                                     
 graphQL 
 Manage GraphQL-specific functionality, including custom queries and mutations, query complexity limits, etc. More details.                              
 cookiePrefix 
 A string that will be prefixed to all cookies that Payload sets.                                                                                                                               
 csrf 
 A whitelist array of URLs to allow Payload to accept cookies from. More details.                                                                     
 defaultDepth 
 If a user does not specify depth while requesting a resource, this depth will be used. More details.                                                                     
 defaultMaxTextLength 
 The maximum allowed string length to be permitted application-wide. Helps to prevent malicious public document creation.                                                                       
 queryPresets 
 An object that to configure Collection Query Presets. More details.                                                                                               
 maxDepth 
 The maximum allowed depth to be permitted application-wide. This setting helps prevent against malicious queries. Defaults to 10. More details.                          
 indexSortableFields 
 Automatically index all sortable top-level fields in the database to improve sort performance and add database compatibility for Azure Cosmos and similar.                                     
 upload 
 Base Payload upload configuration. More details.                                                                                             
 routes 
 Control the routing structure that Payload binds itself to. More details.                                                                               
 email 
 Configure the Email Adapter for Payload to use. More details.                                                                                                             
 onInit 
 A function that is called immediately following startup that receives the Payload instance as its only argument.                                                                               
 debug 
 Enable to expose more detailed error information.                                                                                                                                              
 telemetry 
 Disable Payload telemetry by passing false. More details.                                                                                                                      
 hooks 
 An array of Root Hooks. More details.                                                                                                                                     
 plugins 
 An array of Plugins. More details.                                                                                                                                      
 endpoints 
 An array of Custom Endpoints added to the Payload router. More details.                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins).                                                                                                                                     
 i18n 
 Internationalization configuration. Pass all i18n languages you'd like the admin UI to support. Defaults to English-only. More details.                                              
 secret *            
 A secure, unguessable string that Payload will use for any encryption workflows - for example, password salt / hashing.                                                                        
 sharp 
 If you would like Payload to offer cropping, focal point selection, and automatic media resizing, install and pass the Sharp module to the config here.                                        
 typescript 
 Configure TypeScript settings here. More details.                                                                                                                               
* An asterisk denotes that a property is required.
Note: Some properties are removed from the client-side bundle. More details.
Payload exposes a variety of TypeScript settings that you can leverage. These settings are used to auto-generate TypeScript interfaces for your Collections and Globals, and to ensure that Payload uses your Generated Types for all Local API methods.
To customize the TypeScript settings, use the typescript property in your Payload Config:
The following options are available:
 Option             
 Description                                                                                                                                                                                                         
 autoGenerate 
 By default, Payload will auto-generate TypeScript interfaces for all collections and globals that your config defines. Opt out by setting typescript.autoGenerate: false. More details. 
 declare 
 By default, Payload adds a declare block to your generated types, which makes sure that Payload uses your generated types for all Local API methods. Opt out by setting typescript.declare: false.              
 outputFile 
 Control the output path and filename of Payload's auto-generated types by defining the typescript.outputFile property to a full, absolute path.                                                                   
For Payload command-line scripts, we need to be able to locate your Payload Config. We'll check a variety of locations for the presence of payload.config.ts by default, including:
* Config location detection is different between development and production environments. See below for more details.
Important: Ensure your tsconfig.json is properly configured for Payload to auto-detect your config location. If it does not exist, or does not specify the proper compilerOptions, Payload will default to the current working directory.
Development Mode
In development mode, if the configuration file is not found at the root, Payload will attempt to read your tsconfig.json, and attempt to find the config file specified in the rootDir:
Production Mode
In production mode, Payload will first attempt to find the config file in the outDir of your tsconfig.json, and if not found, will fallback to the rootDir directory:
If none was in either location, Payload will finally check the dist directory.
In addition to the above automated detection, you can specify your own location for the Payload Config. This can be useful in situations where your config is not in a standard location, or you wish to switch between multiple configurations. To do this, Payload exposes an Environment Variable to bypass all automatic config detection.
To use a custom config location, set the PAYLOAD_CONFIG_PATH environment variable:
Tip: PAYLOAD_CONFIG_PATH can be either an absolute path, or path relative to your current working directory.
Payload collects completely anonymous telemetry data about general usage. This data is super important to us and helps us accurately understand how we're growing and what we can do to build the software into everything that it can possibly be. The telemetry that we collect also help us demonstrate our growth in an accurate manner, which helps us as we seek investment to build and scale our team. If we can accurately demonstrate our growth, we can more effectively continue to support Payload as free and open-source software. To opt out of telemetry, you can pass telemetry: false within your Payload Config.
For more information about what we track, take a look at our privacy policy.
Cross-origin resource sharing (CORS) can be configured with either a whitelist array of URLS to allow CORS requests from, a wildcard string (*) to accept incoming requests from any domain, or a object with the following properties:
 Option        
 Description                                                                                                                             
 origins 
 Either a whitelist array of URLS to allow CORS requests from, or a wildcard string ('*') to accept incoming requests from any domain. 
 headers 
 A list of allowed headers that will be appended in Access-Control-Allow-Headers.                                                      
Here's an example showing how to allow incoming requests from any domain:
Here's an example showing how to append a new header (x-custom-header) in Access-Control-Allow-Headers:
You can import types from Payload to help make writing your config easier and type-safe. There are two main types that represent the Payload Config, Config and SanitizedConfig.
The Config type represents a raw Payload Config in its full form. Only the bare minimum properties are marked as required. The SanitizedConfig type represents a Payload Config after it has been fully sanitized. Generally, this is only used internally by Payload.
The Payload Config only lives on the server and is not allowed to contain any client-side code. That way, you can load up the Payload Config in any server environment or standalone script, without having to use Bundlers or Node.js loaders to handle importing client-only modules (e.g. scss files or React Components) without any errors.
Behind the curtains, the Next.js-based Admin Panel generates a ClientConfig, which strips away any server-only code and enriches the config with React Components.
The Payload Config can accept compatibility flags for running the newest versions but with older databases. You should only use these flags if you need to, and should confirm that you need to prior to enabling these flags.
allowLocalizedWithinLocalized
Payload localization works on a field-by-field basis. As you can nest fields within other fields, you could potentially nest a localized field within a localized field—but this would be redundant and unnecessary. There would be no reason to define a localized field within a localized parent field, given that the entire data structure from the parent field onward would be localized.
By default, Payload will remove the localized: true property from sub-fields if a parent field is localized. Set this compatibility flag to true only if you have an existing Payload MongoDB database from pre-3.0, and you have nested localized fields that you would like to maintain without migrating.
Using the bin configuration property, you can inject your own scripts to npx payload. Example for pnpm payload seed:
Step 1: create seed.ts file in the same folder with payload.config.ts with:
Step 2: add the seed script to bin:
Now you can run the command using:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/configuration/collections

A Collection is a group of records, called Documents, that all share a common schema. You can define as many Collections as your application needs. Each Document in a Collection is stored in the Database based on the Fields that you define, and automatically generates a Local API, REST API, and GraphQL API used to manage your Documents.
Collections are also used to achieve Authentication in Payload. By defining a Collection with auth options, that Collection receives additional operations to support user authentication.
Collections are the primary way to structure recurring data in your application, such as users, products, pages, posts, and other types of content that you might want to manage. Each Collection can have its own unique Access Control, Hooks, Admin Options, and more.
To define a Collection Config, use the collection property in your Payload Config:
Tip: If your Collection is only ever meant to contain a single Document, consider using a Global instead.
It's often best practice to write your Collections in separate files and then import them into the main Payload Config.
Here is what a simple Collection Config might look like:
Reminder: For more complex examples, see the Templates and Examples directories in the Payload repository.
The following options are available:
 Option               
 Description                                                                                                                                                                                                                      
 admin 
 The configuration options for the Admin Panel. More details.                                                                                                                                                   
 access 
 Provide Access Control functions to define exactly who should be able to do what with Documents in this Collection. More details.                                                               
 auth 
 Specify options if you would like this Collection to feature authentication. More details.                                                                                                         
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                        
 disableDuplicate 
 When true, do not show the "Duplicate" button while editing documents within this Collection and prevent duplicate from all APIs.                                                                                              
 defaultSort 
 Pass a top-level field to sort by default in the Collection List View. Prefix the name of the field with a minus symbol ("-") to sort in descending order. Multiple fields can be specified by using a string array.             
 dbName 
 Custom table or Collection name depending on the Database Adapter. Auto-generated from slug if not defined.                                                                                                                      
 endpoints 
 Add custom routes to the REST API. Set to false to disable routes. More details.                                                                                                      
 fields *          
 Array of field types that will determine the structure and functionality of the data stored within this Collection. More details.                                                                          
 graphQL 
 Manage GraphQL-related properties for this collection. More 
 hooks 
 Entry point for Hooks. More details.                                                                                                                                                       
 orderable 
 If true, enables custom ordering for the collection, and documents can be reordered via drag and drop. Uses fractional indexing for efficient reordering. 
 labels 
 Singular and plural labels for use in identifying this Collection throughout Payload. Auto-generated from slug if not defined.                                                                                                   
 enableQueryPresets 
 Enable query presets for this Collection. More details.                                                                                                                                             
 lockDocuments 
 Enables or disables document locking. By default, document locking is enabled. Set to an object to configure, or set to false to disable locking. More details.                                   
 slug *            
 Unique, URL-friendly string that will act as an identifier for this Collection.                                                                                                                                                  
 timestamps 
 Set to false to disable documents' automatically generated createdAt and updatedAt timestamps.                                                                                                                               
 typescript 
 An object with property interface as the text used in schema generation. Auto-generated from slug if not defined.                                                                                                              
 upload 
 Specify options if you would like this Collection to support file uploads. For more, consult the Uploads documentation.                                                                                    
 versions 
 Set to true to enable default options, or configure with object properties. More details.                                                                                              
 defaultPopulate 
 Specify which fields to select when this Collection is populated from another document. More Details.                                                            
 indexes 
 Define compound indexes for this collection. This can be used to either speed up querying/sorting by 2 or more fields at the same time or to ensure uniqueness between several fields.                                           
 forceSelect 
 Specify which fields should be selected always, regardless of the select query which can be useful that the field exists for access control / hooks                                                                            
* An asterisk denotes that a property is required.
Fields define the schema of the Documents within a Collection. To learn more, go to the Fields documentation.
Collection Access Control determines what a user can and cannot do with any given Document within a Collection. To learn more, go to the Access Control documentation.
Collection Hooks allow you to tie into the lifecycle of your Documents so you can execute your own logic during specific events. To learn more, go to the Hooks documentation.
The behavior of Collections within the Admin Panel can be fully customized to fit the needs of your application. This includes grouping or hiding their navigation links, adding Custom Components, selecting which fields to display in the List View, and more.
To configure Admin Options for Collections, use the admin property in your Collection Config:
The following options are available:
 Option                       
 Description                                                                                                                                                                                                                  
 group 
 Text or localization object used to group Collection and Global links in the admin navigation. Set to false to hide the link from the navigation while keeping its routes accessible.                                      
 hidden 
 Set to true or a function, called with the current user, returning true to exclude this Collection from navigation and admin routing.                                                                                        
 hooks 
 Admin-specific hooks for this Collection. More details.                                                                                                                                              
 useAsTitle 
 Specify a top-level field to use for a document title throughout the Admin Panel. If no field is defined, the ID of the document is used as the title. A field with virtual: true cannot be used as the title.             
 description 
 Text to display below the Collection label in the List View to give editors more information. Alternatively, you can use the admin.components.Description to render a React component. More details. 
 defaultColumns 
 Array of field names that correspond to which columns to show by default in this Collection's List View.                                                                                                                     
 disableCopyToLocale 
 Disables the "Copy to Locale" button while editing documents within this Collection. Only applicable when localization is enabled.                                                                                           
 hideAPIURL 
 Hides the "API URL" meta field while editing documents within this Collection.                                                                                                                                               
 enableRichTextLink 
 The Rich Text field features a Link element which allows for users to automatically reference related documents within their rich text. Set to true by default.                                   
 enableRichTextRelationship 
 The Rich Text field features a Relationship element which allows for users to automatically reference related documents within their rich text. Set to true by default.                           
 meta 
 Page metadata overrides to apply to this Collection within the Admin Panel. More details.                                                                                                               
 preview 
 Function to generate preview URLs within the Admin Panel that can point to your app. More details.                                                                                                       
 livePreview 
 Enable real-time editing for instant visual feedback of your front-end application. More details.                                                                                                
 components 
 Swap in your own React components to be used within this Collection. More details.                                                                                                                     
 listSearchableFields 
 Specify which fields should be searched in the List search view. More details.                                                                                                                    
 pagination 
 Set pagination-specific options for this Collection. More details.                                                                                                                                            
 baseListFilter 
 You can define a default base filter for this collection's List view, which will be merged into any filters that the user performs.                                                                                          
Collections can set their own Custom Components which only apply to Collection-specific UI within the Admin Panel. This includes elements such as the Save Button, or entire layouts such as the Edit View.
To override Collection Components, use the admin.components property in your Collection Config:
The following options are available:
 Option            
 Description                                                                                                                                                                        
 afterList 
 An array of components to inject after the built-in List View. More details.                                                         
 afterListTable 
 An array of components to inject after the built-in List View's table. More details.                                            
 beforeList 
 An array of components to inject before the built-in List View. More details.                                                       
 beforeListTable 
 An array of components to inject before the built-in List View's table. More details.                                          
 listMenuItems 
 An array of components to render within a menu next to the List Controls (after the Columns and Filters options)                                                                   
 Description 
 A component to render below the Collection label in the List View. An alternative to the admin.description property. More details. 
 edit 
 Override specific components within the Edit View. More details.                                                                                             
 views 
 Override or create new views within the Admin Panel. More details.                                                                            
The following options are available:
 Option            
 Description                                                                                                                                                                                               
 SaveButton 
 Replace the default Save Button within the Edit View. Drafts must be disabled. More details.                                          
 SaveDraftButton 
 Replace the default Save Draft Button within the Edit View. Drafts must be enabled and autosave must be disabled. More details. 
 PublishButton 
 Replace the default Publish Button within the Edit View. Drafts must be enabled. More details.                                     
 PreviewButton 
 Replace the default Preview Button within the Edit View. Preview must be enabled. More details.                                      
 Upload 
 Replace the default Upload component within the Edit View. Upload must be enabled. More details.                                           
Note: For details on how to build Custom Components, see Building Custom Components.
All Collections receive their own List View which displays a paginated list of documents that can be sorted and filtered. The pagination behavior of the List View can be customized on a per-Collection basis, and uses the same Pagination API that Payload provides.
To configure pagination options, use the admin.pagination property in your Collection Config:
The following options are available:
 Option         
 Description                                                                                         
 defaultLimit 
 Integer that specifies the default per-page limit that should be used. Defaults to 10.              
 limits 
 Provide an array of integers to use as per-page options for admins to choose from in the List View. 
In the List View, there is a "search" box that allows you to quickly find a document through a simple text search. By default, it searches on the ID field. If defined, the admin.useAsTitle field is used. Or, you can explicitly define which fields to search based on the needs of your application.
To define which fields should be searched, use the admin.listSearchableFields property in your Collection Config:
Tip: If you are adding listSearchableFields, make sure you index each of these fields so your admin queries can remain performant.
You can completely disable GraphQL for this collection by passing graphQL: false to your collection config. This will completely disable all queries, mutations, and types from appearing in your GraphQL schema.
You can also pass an object to the collection's graphQL property, which allows you to define the following properties:
 Option             
 Description                                                                         
 singularName 
 Override the "singular" name that will be used in GraphQL schema generation.        
 pluralName 
 Override the "plural" name that will be used in GraphQL schema generation.          
 disableQueries 
 Disable all GraphQL queries that correspond to this collection by passing true.   
 disableMutations 
 Disable all GraphQL mutations that correspond to this collection by passing true. 
You can import types from Payload to help make writing your Collection configs easier and type-safe. There are two main types that represent the Collection Config, CollectionConfig and SanitizeCollectionConfig.
The CollectionConfig type represents a raw Collection Config in its full form, where only the bare minimum properties are marked as required. The SanitizedCollectionConfig type represents a Collection Config after it has been fully sanitized. Generally, this is only used internally by Payload.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/configuration/globals

Globals are in many ways similar to Collections, except that they correspond to only a single Document. You can define as many Globals as your application needs. Each Global Document is stored in the Database based on the Fields that you define, and automatically generates a Local API, REST API, and GraphQL API used to manage your Documents.
Globals are the primary way to structure singletons in Payload, such as a header navigation, site-wide banner alerts, or app-wide localized strings. Each Global can have its own unique Access Control, Hooks, Admin Options, and more.
To define a Global Config, use the globals property in your Payload Config:
Tip: If you have more than one Global that share the same structure, consider using a Collection instead.
It's often best practice to write your Globals in separate files and then import them into the main Payload Config.
Here is what a simple Global Config might look like:
Reminder: For more complex examples, see the Templates and Examples directories in the Payload repository.
The following options are available:
 Option          
 Description                                                                                                                                                                                    
 access 
 Provide Access Control functions to define exactly who should be able to do what with this Global. More details.                                                  
 admin 
 The configuration options for the Admin Panel. More details.                                                                                                                 
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                                      
 dbName 
 Custom table or collection name for this Global depending on the Database Adapter. Auto-generated from slug if not defined.                                                                    
 description 
 Text or React component to display below the Global header to give editors more information.                                                                                                   
 endpoints 
 Add custom routes to the REST API. More details.                                                                                                      
 fields *     
 Array of field types that will determine the structure and functionality of the data stored within this Global. More details.                                            
 graphQL 
 Manage GraphQL-related properties related to this global. More details 
 hooks 
 Entry point for Hooks. More details.                                                                                                                         
 label 
 Text for the name in the Admin Panel or an object with keys for each language. Auto-generated from slug if not defined.                                                                        
 lockDocuments 
 Enables or disables document locking. By default, document locking is enabled. Set to an object to configure, or set to false to disable locking. More details. 
 slug *       
 Unique, URL-friendly string that will act as an identifier for this Global.                                                                                                                    
 typescript 
 An object with property interface as the text used in schema generation. Auto-generated from slug if not defined.                                                                            
 versions 
 Set to true to enable default options, or configure with object properties. More details.                                                                
 forceSelect 
 Specify which fields should be selected always, regardless of the select query which can be useful that the field exists for access control / hooks                                          
* An asterisk denotes that a property is required.
Fields define the schema of the Global. To learn more, go to the Fields documentation.
Global Access Control determines what a user can and cannot do with any given Global Document. To learn more, go to the Access Control documentation.
Global Hooks allow you to tie into the lifecycle of your Documents so you can execute your own logic during specific events. To learn more, go to the Hooks documentation.
The behavior of Globals within the Admin Panel can be fully customized to fit the needs of your application. This includes grouping or hiding their navigation links, adding Custom Components, setting page metadata, and more.
To configure Admin Options for Globals, use the admin property in your Global Config:
The following options are available:
 Option        
 Description                                                                                                                                                                             
 group 
 Text or localization object used to group Collection and Global links in the admin navigation. Set to false to hide the link from the navigation while keeping its routes accessible. 
 hidden 
 Set to true or a function, called with the current user, returning true to exclude this Global from navigation and admin routing.                                                       
 components 
 Swap in your own React components to be used within this Global. More details.                                                                                    
 preview 
 Function to generate a preview URL within the Admin Panel for this Global that can point to your app. More details.                                                 
 livePreview 
 Enable real-time editing for instant visual feedback of your front-end application. More details.                                                           
 hideAPIURL 
 Hides the "API URL" meta field while editing documents within this collection.                                                                                                          
 meta 
 Page metadata overrides to apply to this Global within the Admin Panel. More details.                                                                              
Globals can set their own Custom Components which only apply to Global-specific UI within the Admin Panel. This includes elements such as the Save Button, or entire layouts such as the Edit View.
To override Global Components, use the admin.components property in your Global Config:
The following options are available:
 Option     
 Description                                                                                             
 elements 
 Override or create new elements within the Edit View. More details.               
 views 
 Override or create new views within the Admin Panel. More details. 
The following options are available:
 Option            
 Description                                                                                                                                                                                                  
 SaveButton 
 Replace the default Save Button with a Custom Component. Drafts must be disabled. More details.                                          
 SaveDraftButton 
 Replace the default Save Draft Button with a Custom Component. Drafts must be enabled and autosave must be disabled. More details. 
 PublishButton 
 Replace the default Publish Button with a Custom Component. Drafts must be enabled. More details.                                     
 PreviewButton 
 Replace the default Preview Button with a Custom Component. Preview must be enabled. More details.                                      
Note: For details on how to build Custom Components, see Building Custom Components.
You can completely disable GraphQL for this global by passing graphQL: false to your global config. This will completely disable all queries, mutations, and types from appearing in your GraphQL schema.
You can also pass an object to the global's graphQL property, which allows you to define the following properties:
 Option             
 Description                                                                     
 name 
 Override the name that will be used in GraphQL schema generation.               
 disableQueries 
 Disable all GraphQL queries that correspond to this global by passing true.   
 disableMutations 
 Disable all GraphQL mutations that correspond to this global by passing true. 
You can import types from Payload to help make writing your Global configs easier and type-safe. There are two main types that represent the Global Config, GlobalConfig and SanitizeGlobalConfig.
The GlobalConfig type represents a raw Global Config in its full form, where only the bare minimum properties are marked as required. The SanitizedGlobalConfig type represents a Global Config after it has been fully sanitized. Generally, this is only used internally by Payload.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/configuration/i18n

The Admin Panel is translated in over 30 languages and counting. With I18n, editors can navigate the interface and read API error messages in their preferred language. This is similar to Localization, but instead of managing translations for the data itself, you are managing translations for your application's interface.
By default, Payload comes preinstalled with English, but you can easily load other languages into your own application. Languages are automatically detected based on the request. If no language is detected, or if the user's language is not yet supported by your application, English will be chosen.
To add I18n to your project, you first need to install the @payloadcms/translations package:
Once installed, it can be configured using the i18n key in your Payload Config:
Note: If there is a language that Payload does not yet support, we accept code contributions.
You can easily customize and override any of the i18n settings that Payload provides by default. Payload will use your custom options and merge them in with its own.
The following options are available:
 Option               
 Description                                                                                                        
 fallbackLanguage 
 The language to fall back to if the user's preferred language is not supported. Default is 'en'.                 
 translations 
 An object containing the translations. The keys are the language codes and the values are the translations.        
 supportedLanguages 
 An object containing the supported languages. The keys are the language codes and the values are the translations. 
You can easily add new languages to your Payload app by providing the translations for the new language. Payload maintains a number of built-in translations that can be imported from @payloadcms/translations, but you can also provide your own Custom Translations to support any language.
To add a new language, use the i18n.supportedLanguages key in your Payload Config:
Tip: It's best to only support the languages that you need so that the bundled JavaScript is kept to a minimum for your project.
You can customize Payload's built-in translations either by extending existing languages or by adding new languages entirely. This can be done by injecting new translation strings into existing languages, or by providing an entirely new language keys altogether.
To add Custom Translations, use the i18n.translations key in your Payload Config:
While Payload's built-in features come fully translated, you may also want to translate parts of your own project. This is possible in places like Collections and Globals, such as on their labels and groups, field labels, descriptions or input placeholder text.
To do this, provide the translations wherever applicable, keyed to the language code:
Users can change their preferred language in their account settings or by otherwise manipulating their User Preferences.
Payload's backend sets the language on incoming requests before they are handled. This allows backend validation to return error messages in the user's own language or system generated emails to be sent using the correct translation. You can make HTTP requests with the accept-language header and Payload will use that language.
Anywhere in your Payload app that you have access to the req object, you can access Payload's extensive internationalization features assigned to req.i18n. To access text translations you can use req.t('namespace:key').
In order to use Custom Translations in your project, you need to provide the types for the translations.
Here we create a shareable translations object. We will import this in both our custom components and in our Payload config.
In this example we show how to extend English, but you can do the same for any language you want.
Import the shared translations object into our Payload config so they are available for use:
Import the shared translation types to use in your Custom Component:
Additionally, Payload exposes the t function in various places, for example in labels. Here is how you would type those:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/configuration/localization

Localization is one of the most important features of a modern CMS. It allows you to manage content in multiple languages, then serve it to your users based on their requested language. This is similar to I18n, but instead of managing translations for your application's interface, you are managing translations for the data itself.
With Localization, you can begin to serve personalized content to your users based on their specific language preferences, such as a multilingual website or multi-site application. There are no limits to the number of locales you can add to your Payload project.
To configure Localization, use the localization key in your Payload Config:
Add the localization property to your Payload Config to enable Localization project-wide. You'll need to provide a list of all locales that you'd like to support as well as set a few other options.
To configure locales, use the localization.locales property in your Payload Config:
You can also define locales using full configuration objects:
Tip: Localization works very well alongside I18n.
The following options are available:
 Option                       
 Description                                                                                                                                                                                                                                                                                                                                                                                                                       
 locales 
 Array of all the languages that you would like to support. More details 
 defaultLocale 
 Required string that matches one of the locale codes from the array provided. By default, if no locale is specified, documents will be returned in this locale.                                                                                                                                                                                                                                                                   
 fallback 
 Boolean enabling "fallback" locale functionality. If a document is requested in a locale, but a field does not have a localized value corresponding to the requested locale, then if this property is enabled, the document will automatically fall back to the fallback locale value. If this property is not enabled, the value will not be populated unless a fallback is explicitly provided in the request. True by default. 
 filterAvailableLocales 
 A function that is called with the array of locales and the req, it should return locales to show in admin UI selector. See more.                                                                                                                                                                                                                                                                
The locales array is a list of all the languages that you would like to support. This can be strings for each language code, or full configuration objects for more advanced options.
The locale codes do not need to be in any specific format. It's up to you to define how to represent your locales. Common patterns are to use two-letter ISO 639 language codes or four-letter language and country codes (ISO 3166‑1) such as en-US, en-UK, es-MX, etc.
 Option               
 Description                                                                                                                    
 code *        
 Unique code to identify the language throughout the APIs for locale and fallbackLocale 
 label 
 A string to use for the selector when choosing a language, or an object keyed on the i18n keys for different languages in use. 
 rtl 
 A boolean that when true will make the admin UI display in Right-To-Left.                                                      
 fallbackLocale 
 The code for this language to fallback to when properties of a document are not present.                                       
* An asterisk denotes that a property is required.
In some projects you may want to filter the available locales shown in the admin UI selector. You can do this by providing a filterAvailableLocales function in your Payload Config. This is called on the server side and is passed the array of locales. This means that you can determine what locales are visible in the localizer selection menu at the top of the admin panel. You could do this per user, or implement a function that scopes these to tenants and more. Here is an example using request headers in a multi-tenant application:
Since the filtering happens at the root level of the application and its result is not calculated every time you navigate to a new page, you may want to call router.refresh in a custom component that watches when values that affect the result change. In the example above, you would want to do this when supportedLocales changes on the tenant document.
Payload Localization works on a field level—not a document level. In addition to configuring the base Payload Config to support Localization, you need to specify each field that you would like to localize.
Here is an example of how to enable Localization for a field:
With the above configuration, the title field will now be saved in the database as an object of all locales instead of a single string.
All field types with a name property support the localized property—even the more complex field types like arrays and blocks.
Note: Enabling Localization for field types that support nested fields will automatically create localized "sets" of all fields contained within the field. For example, if you have a page layout using a blocks field type, you have the choice of either localizing the full layout, by enabling Localization on the top-level blocks field, or only certain fields within the layout.
Important: When converting an existing field to or from localized: true the data structure in the document will change for this field and so existing data for this field will be lost. Before changing the Localization setting on fields with existing data, you may need to consider a field migration strategy.
When retrieving documents, you can specify which locale you'd like to receive as well as which fallback locale should be used.
REST API locale functionality relies on URL query parameters.
?locale=
Specify your desired locale by providing the locale query parameter directly in the endpoint URL.
?fallback-locale=
Specify fallback locale to be used by providing the fallback-locale query parameter. This can be provided as either a valid locale as provided to your base Payload Config, or 'null', 'false', or 'none' to disable falling back.
Example:
In the GraphQL API, you can specify locale and fallbackLocale args to all relevant queries and mutations.
The locale arg will only accept valid locales, but locales will be formatted automatically as valid GraphQL enumvalues (dashes or special characters will be converted to underscores, spaces will be removed, etc.). If you are curiousto see how locales are auto-formatted, you can use the GraphQL playground.
The fallbackLocale arg will accept valid locales as well as none to disable falling back.
Example:
In GraphQL, specifying the locale at the top level of a query will automatically apply it throughout all nested relationship fields. You can override this behavior by re-specifying locale arguments in nested related document queries.
You can specify locale as well as fallbackLocale within the Local API as well as properties on the options argument. The locale property will accept any valid locale, and the fallbackLocale property will accept any valid locale as well as 'null', 'false', false, and 'none'.
Example:
Tip: The REST and Local APIs can return all Localization data in one request by passing 'all' or '*' as the locale parameter. The response will be structured so that field values come back as the full objects keyed for each locale instead of the single, translated value.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/configuration/environment-vars

Environment Variables are a way to store sensitive information that your application needs to function. This could be anything from API keys to Database credentials. Payload allows you to easily use Environment Variables within your config and throughout your application.
If you are using Next.js, no additional setup is required other than creating your .env file.
To use Environment Variables, add a .env file to the root of your project:
Here is an example of what an .env file might look like:
To use Environment Variables in your Payload Config, you can access them directly from process.env:
For security and safety reasons, the Admin Panel does not include Environment Variables in its client-side bundle by default. But, Next.js provides a mechanism to expose Environment Variables to the client-side bundle when needed.
If you are building a Custom Component and need to access Environment Variables from the client-side, you can do so by prefixing them with NEXT_PUBLIC_.
Important: Be careful about what variables you provide to your client-side code. Analyze every single one to make sure that you're not accidentally leaking sensitive information. Only ever include keys that are safe for the public to read in plain text.
For example, if you've got the following Environment Variable:
This key will automatically be made available to the client-side Payload bundle and can be referenced in your Custom Component as follows:
For more information, check out the Next.js Documentation.
If you are using Payload outside of Next.js, we suggest using the dotenv package to handle Environment Variables from .env files. This will automatically load your Environment Variables into process.env.
To do this, import the package as high up in your application as possible:
Tip: Be sure that dotenv can find your .env file. By default, it will look for a file named .env in the root of your project. If you need to specify a different file, pass the path into the config options.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/database/overview

Payload is database agnostic, meaning you can use any type of database behind Payload's familiar APIs. Payload is designed to interact with your database through a Database Adapter, which is a thin layer that translates Payload's internal data structures into your database's native data structures.
Currently, Payload officially supports the following Database Adapters:
To configure a Database Adapter, use the db property in your Payload Config:
Reminder: The Database Adapter is an external dependency and must be installed in your project separately from Payload. You can find the installation instructions for each Database Adapter in their respective documentation.
There are several factors to consider when choosing which database technology and hosting option is right for your project and workload. Payload can theoretically support any database, but it's up to you to decide which database to use.
There are two main categories of databases to choose from:
If your project has a lot of dynamic fields, and you are comfortable with allowing Payload to enforce data integrity across your documents, MongoDB is a great choice. With it, your Payload documents are stored as one document in your database—no matter if you have localization enabled, how many block or array fields you have, etc. This means that the shape of your data in your database will very closely reflect your field schema, and there is minimal complexity involved in storing or retrieving your data.
You should prefer MongoDB if:
Many projects might call for more rigid database architecture where the shape of your data is strongly enforced at the database level. For example, if you know the shape of your data and it's relatively "flat", and you don't anticipate it to change often, your workload might suit relational databases like Postgres very well.
You should prefer a relational DB like Postgres or SQLite if:
It's important to note that nearly every Payload feature is available in all of our officially supported Database Adapters, including Localization, Arrays, Blocks, etc. The only thing that is not supported in SQLite yet is the Point Field, but that should be added soon.
It's up to you to choose which database you would like to use based on the requirements of your project. Payload has no opinion on which database you should ultimately choose.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/database/migrations

Payload exposes a full suite of migration controls available for your use. Migration commands are accessible via the npm run payload command in your project directory.
Ensure you have an npm script called "payload" in your package.json file.
Note that you need to run Payload migrations through the package manager that you are using, because Payload should not be globally installed on your system.
Payload stores all created migrations in a folder that you can specify. By default, migrations are stored in ./src/migrations.
A migration file has two exports - an up function, which is called when a migration is executed, and a down function that will be called if for some reason the migration fails to complete successfully. The up function should contain all changes that you attempt to make within the migration, and the down should ideally revert any changes you make.
Here is an example migration file:
When migrations are run, each migration is performed in a new transaction for you. All you need to do is pass the req object to any Local API or direct database calls, such as payload.db.updateMany(), to make database changes inside the transaction. Assuming no errors were thrown, the transaction is committed after your up or down function runs. If the migration errors at any point or fails to commit, it is caught and the transaction gets aborted. This way no change is made to the database if the migration fails.
Additionally, you can bypass Payload's layer entirely and perform operations directly on your underlying database within the active transaction:
In SQLite, transactions are disabled by default. More.
Each DB adapter has an optional property migrationDir where you can override where you want your migrations to be stored/read. If this is not specified, Payload will check the default and possibly make a best effort to find your migrations directory by searching in common locations ie. ./src/migrations, ./dist/migrations, ./migrations, etc.
All database adapters should implement similar migration patterns, but there will be small differences based on the adapter and its specific needs. Below is a list of all migration commands that should be supported by your database adapter.
The migrate command will run any migrations that have not yet been run.
Create a new migration file in the migrations directory. You can optionally name the migration that will be created. By default, migrations will be named using a timestamp.
Flags:
The migrate:status command will check the status of migrations and output a table of which migrations have been run, and which migrations have not yet run.
payload migrate:status
Roll back the last batch of migrations.
Roll back all migrations that have been run, and run them again.
Roll back all migrations.
Drops all entities from the database and re-runs all migrations from scratch.
Depending on which Database Adapter you use, your migration workflow might differ subtly.
In relational databases, migrations will be required for non-development database environments. But with MongoDB, you might only need to run migrations once in a while (or never even need them).
In MongoDB, you'll only ever really need to run migrations for times where you change your database shape, and you have lots of existing data that you'd like to transform from Shape A to Shape B.
In this case, you can create a migration by running pnpm payload migrate:create, and then write the logic that you need to perform to migrate your documents to their new shape. You can then either run your migrations in CI before you build / deploy, or you can run them locally, against your production database, by using your production database connection string on your local computer and running the pnpm payload migrate command.
In relational databases like Postgres, migrations are a bit more important, because each time you add a new field or a new collection, you'll need to update the shape of your database to match your Payload Config (otherwise you'll see errors upon trying to read / write your data).
That means that Postgres users of Payload should become familiar with the entire migration workflow from top to bottom.
Here is an overview of a common workflow for working locally against a development database, creating migrations, and then running migrations against your production database before deploying.
1 - work locally using push mode
Payload uses Drizzle ORM's powerful push mode to automatically sync data changes to your database for you while in development mode. By default, this is enabled and is the suggested workflow to using Postgres and Payload while doing local development.
You can disable this setting and solely use migrations to manage your local development database (pass push: false to your Postgres adapter), but if you do disable it, you may see frequent errors while running development mode. This is because Payload will have updated to your new data shape, but your local database will not have updated.
For this reason, we suggest that you leave push as its default setting and treat your local dev database as a sandbox.
For more information about push mode and prototyping in development, click here.
The typical workflow in Payload is to build out your Payload configs, install plugins, and make progress in development mode - allowing Drizzle to push your changes to your local database for you. Once you're finished, you can create a migration.
But importantly, you do not need to run migrations against your development database, because Drizzle will have already pushed your changes to your database for you.
Warning: do not mix "push" and migrations with your local development database. If you use "push" locally, and then try to migrate, Payload will throw a warning, telling you that these two methods are not meant to be used interchangeably.
2 - create a migration
Once you're done with working in your Payload Config, you can create a migration. It's best practice to try and complete a specific task or fully build out a feature before you create a migration.
But once you're ready, you can run pnpm payload migrate:create, which will perform the following steps for you:
We won't immediately run this migration for you, however.
Tip: migrations created by Payload are relatively programmatic in nature, so there should not be any surprises, but before you check in the created migration it's a good idea to always double-check the contents of the migration files.
3 - set up your build process to run migrations
Generally, you want to run migrations before you build Payload for production. This typically happens in your CI pipeline and can usually be configured on platforms like Payload Cloud, Vercel, or Netlify by specifying your build script.
A common set of scripts in a package.json, set up to run migrations in CI, might look like this:
In the example above, we've specified a ci script which we can use as our "build script" in the platform that we are deploying to production with.
This will require that your build pipeline can connect to your database, and it will simply run the payload migrate command prior to starting the build process. By calling payload migrate, Payload will automatically execute any migrations in your /migrations folder that have not yet been executed against your production database, in the order that they were created.
If it fails, the deployment will be rejected. But now, with your build script set up to run your migrations, you will be all set! Next time you deploy, your CI will execute the required migrations for you, and your database will be caught up with the shape that your Payload Config requires.
In certain cases, you might want to run migrations at runtime when the server starts. Running them during build time may be impossible due to not having access to your database connection while building or similar reasoning.
If you're using a long-running server or container where your Node server starts up one time and then stays initialized, you might prefer to run migrations on server startup instead of within your CI.
In order to run migrations at runtime, on initialization, you can pass your migrations to your database adapter under the prodMigrations key as follows:
Passing your migrations as shown above will tell Payload, in production only, to execute any migrations that need to be run prior to completing the initialization of Payload. This is ideal for long-running services where Payload will only be initialized at startup.
Warning: if Payload is instructed to run migrations in production, this may slow down serverless cold starts on platforms such as Vercel. Generally, this option should only be used for long-running servers / containers.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/database/transactions

Database transactions allow your application to make a series of database changes in an all-or-nothing commit. Consider an HTTP request that creates a new Order and has an afterChange hook to update the stock count of related Items. If an error occurs when updating an Item and an HTTP error is returned to the user, you would not want the new Order to be persisted or any other items to be changed either. This kind of interaction with the database is handled seamlessly with transactions.
By default, Payload will use transactions for all data changing operations, as long as it is supported by the configured database. Database changes are contained within all Payload operations and any errors thrown will result in all changes being rolled back without being committed. When transactions are not supported by the database, Payload will continue to operate as expected without them.
 Note:
MongoDB requires a connection to a replicaset in order to make use of transactions.
 Note:
Transactions in SQLite are disabled by default. You need to pass transactionOptions: {} to enable them.
The initial request made to Payload will begin a new transaction and attach it to the req.transactionID. If you have a hook that interacts with the database, you can opt in to using the same transaction by passing the req in the arguments. For example:
Since Payload hooks can be async and be written to not await the result, it is possible to have an incorrect success response returned on a request that is rolled back. If you have a hook where you do not await the result, then you should not pass the req.transactionID.
When writing your own scripts or custom endpoints, you may wish to have direct control over transactions. This is useful for interacting with your database outside of Payload's Local API.
The following functions can be used for managing transactions:
Payload uses the req object to pass the transaction ID through to the database adapter. If you are not using the req object, you can make a new object to pass the transaction ID directly to database adapter methods and Local API calls. Example:
If you wish to disable transactions entirely, you can do so by passing false as the transactionOptions in your database adapter configuration. All the official Payload database adapters support this option.
In addition to allowing database transactions to be disabled at the adapter level. You can prevent Payload from using a transaction in direct calls to the Local API by adding disableTransaction: true to the args. For example:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/database/mongodb

To use Payload with MongoDB, install the package @payloadcms/db-mongodb. It will come with everything you need to store your Payload data in MongoDB.
Then from there, pass it to your Payload Config as follows:
 Option                     
 Description                                                                                                                                                                                                                                                                                                  
 autoPluralization 
 Tell Mongoose to auto-pluralize any collection names if it encounters any singular words used as collection slugs.                                                                                                                                                                                         
 connectOptions 
 Customize MongoDB connection options. Payload will connect to your MongoDB database using default options which you can override and extend to include all the options available to mongoose.                                                        
 collectionsSchemaOptions 
 Customize Mongoose schema options for collections.                                                                                                                                                                                                                                                           
 disableIndexHints 
 Set to true to disable hinting to MongoDB to use 'id' as index. This is currently done when counting documents for pagination, as it increases the speed of the count function used in that query. Disabling this optimization might fix some problems with AWS DocumentDB. Defaults to false                
 migrationDir 
 Customize the directory that migrations are stored.                                                                                                                                                                                                                                                          
 transactionOptions 
 An object with configuration properties used in transactions or false which will disable the use of transactions.                                                                                                                                
 collation 
 Enable language-specific string comparison with customizable options. Available on MongoDB 3.4+. Defaults locale to "en". Example: { strength: 3 }. For a full list of collation options and their definitions, see the MongoDB documentation. 
 allowAdditionalKeys 
 By default, Payload strips all additional keys from MongoDB data that don't exist in the Payload schema. If you have some data that you want to include to the result but it doesn't exist in Payload, you can set this to true. Be careful as Payload access control won't work for this data.          
 allowIDOnCreate 
 Set to true to use the id passed in data on the create API operations without using a custom ID field.                                                                                                                                                                                                   
After Payload is initialized, this adapter exposes all of your Mongoose models and they are available for you to work with directly.
You can access Mongoose models as follows:
Limitations with DocumentDB and Azure Cosmos DB:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/database/postgres

To use Payload with Postgres, install the package @payloadcms/db-postgres. It leverages Drizzle ORM and node-postgres to interact with a Postgres database that you provide.
Alternatively, the @payloadcms/db-vercel-postgres package is also available and is optimized for use with Vercel.
It automatically manages changes to your database for you in development mode, and exposes a full suite of migration controls for you to leverage in order to keep other database environments in sync with your schema. DDL transformations are automatically generated.
To configure Payload to use Postgres, pass the postgresAdapter to your Payload Config as follows:
@payloadcms/db-postgres:
@payloadcms/db-vercel-postgres:
Note: If you're using vercelPostgresAdapter your process.env.POSTGRES_URL or pool.connectionString points to a local database (e.g hostname has localhost or 127.0.0.1) we use the pg module for pooling instead of @vercel/postgres. This is because @vercel/postgres doesn't work with local databases, if you want to disable that behavior, you can pass forceUseVercelPostgres: true to the adapter's args and follow Vercel guide for a Docker Neon DB setup.
 Option                      
 Description                                                                                                                                                                      
 pool *                   
 Pool connection options that will be passed to Drizzle and node-postgres or to @vercel/postgres 
 push 
 Disable Drizzle's db push in development mode. By default, push is enabled for development mode only. 
 migrationDir 
 Customize the directory that migrations are stored.                                                                                                                              
 schemaName (experimental) 
 A string for the postgres schema to use, defaults to 'public'.                                                                                                                   
 idType 
 A string of 'serial', or 'uuid' that is used for the data type given to id columns.                                                                                              
 transactionOptions 
 A PgTransactionConfig object for transactions, or set to false to disable using transactions. More details 
 disableCreateDatabase 
 Pass true to disable auto database creation if it doesn't exist. Defaults to false.                                                                                          
 localesSuffix 
 A string appended to the end of table names for storing localized fields. Default is '_locales'.                                                                                
 relationshipsSuffix 
 A string appended to the end of table names for storing relationships. Default is '_rels'.                                                                                      
 versionsSuffix 
 A string appended to the end of table names for storing versions. Defaults to '_v'.                                                                                             
 beforeSchemaInit 
 Drizzle schema hook. Runs before the schema is built. More Details 
 afterSchemaInit 
 Drizzle schema hook. Runs after the schema is built. More Details 
 generateSchemaOutputFile 
 Override generated schema from payload generate:db-schema file path. Defaults to {CWD}/src/payload-generated.schema.ts 
 allowIDOnCreate 
 Set to true to use the id passed in data on the create API operations without using a custom ID field.                                                                       
After Payload is initialized, this adapter will expose the full power of Drizzle to you for use if you need it.
To ensure type-safety, you need to generate Drizzle schema first with:
Then, you can access Drizzle as follows:
In addition to exposing Drizzle directly, all of the tables, Drizzle relations, and enum configs are exposed for you via the payload.db property as well.
Drizzle exposes two ways to work locally in development mode.
The first is db push, which automatically pushes changes you make to your Payload Config (and therefore, Drizzle schema) to your database so you don't have to manually migrate every time you change your Payload Config. This only works in development mode, and should not be mixed with manually running migrate commands.
You will be warned if any changes that you make will entail data loss while in development mode. Push is enabled by default, but you can opt out if you'd like.
Alternatively, you can disable push and rely solely on migrations to keep your local database in sync with your Payload Config.
In Postgres, migrations are a fundamental aspect of working with Payload and you should become familiar with how they work.
For more information about migrations, click here.
Runs before the schema is built. You can use this hook to extend your database structure with tables that won't be managed by Payload.
One use case is preserving your existing database structure when migrating to Payload. By default, Payload drops the current database schema, which may not be desirable in this scenario. To quickly generate the Drizzle schema from your database you can use Drizzle Introspection You should get the schema.ts file which may look like this:
You can import them into your config and append to the schema with the beforeSchemaInit hook like this:
Make sure Payload doesn't overlap table names with its collections. For example, if you already have a collection with slug "users", you should either change the slug or dbName to change the table name for this collection.
Runs after the Drizzle schema is built. You can use this hook to modify the schema with features that aren't supported by Payload, or if you want to add a column that you don't want to be in the Payload config. To extend a table, Payload exposes extendTable utillity to the args. You can refer to the Drizzle documentation. The following example adds the extra_integer_column column and a composite index on country and city columns.
Columns and tables, added in schema hooks won't be added to the generated via payload generate:db-schema Drizzle schema. If you want them to be there, you either have to edit this file manually or mutate the internal Payload "raw" SQL schema in the beforeSchemaInit:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/overview

Fields are the building blocks of Payload. They define the schema of the Documents that will be stored in the Database, as well as automatically generate the corresponding UI within the Admin Panel.
There are many Field Types to choose from, ranging anywhere from simple text strings to nested arrays and blocks. Most fields save data to the database, while others are strictly presentational. Fields can have Custom Validations, Conditional Logic, Access Control, Hooks, and so much more.
Fields can be endlessly customized in their appearance and behavior without affecting their underlying data structure. Fields are designed to withstand heavy modification or even complete replacement through the use of Custom Field Components.
To configure fields, use the fields property in your Collection or Global config:
Payload provides a wide variety of built-in Field Types, each with its own unique properties and behaviors that determine which values it can accept, how it is presented in the API, and how it will be rendered in the Admin Panel.
To configure fields, use the fields property in your Collection or Global config:
Reminder: Each field is an object with at least the type property. This matches the field to its corresponding Field Type. More details.
There are three main categories of fields in Payload:
To begin writing fields, first determine which Field Type best supports your application. Then author your field accordingly using the Field Options for your chosen field type.
Data Fields are used to store data in the Database. All Data Fields have a name property. This is the key that will be used to store the field's value.
Here are the available Data Fields:
Presentational Fields do not store data in the database. Instead, they are used to organize and present other fields in the Admin Panel, or to add custom UI components.
Here are the available Presentational Fields:
Virtual fields are used to display data that is not stored in the database. They are useful for displaying computed values that populate within the APi response through hooks, etc.
Here are the available Virtual Fields:
Tip: Don't see a built-in field type that you need? Build it! Using a combination of Field Validations and Custom Components, you can override the entirety of how a component functions within the Admin Panel to effectively create your own field type.
All fields require at least the type property. This matches the field to its corresponding Field Type to determine its appearance and behavior within the Admin Panel. Each Field Type has its own unique set of options based on its own type.
To set a field's type, use the type property in your Field Config:
For a full list of configuration options, see the documentation for each Field Type.
All Data Fields require a name property. This is the key that will be used to store and retrieve the field's value in the database. This property must be unique amongst this field's siblings.
To set a field's name, use the name property in your Field Config:
Payload reserves various field names for internal use. Using reserved field names will result in your field being sanitized from the config.
The following field names are forbidden and cannot be used:
In addition to being able to define Hooks on a document-level, you can define extremely granular logic field-by-field.
To define Field-level Hooks, use the hooks property in your Field Config:
For full details on Field-level Hooks, see the Field Hooks documentation.
In addition to being able to define Access Control on a document-level, you can define extremely granular permissions field-by-field.
To define Field-level Access Control, use the access property in your Field Config:
For full details on Field-level Access Control, see the Field Access Control documentation.
Fields can be optionally prefilled with initial values. This is used in both the Admin Panel as well as API requests to populate missing or undefined field values during the create or update operations.
To set a field's default value, use the defaultValue property in your Field Config:
Default values can be defined as a static value or a function that returns a value. When a defaultValue is defined statically, Payload's Database Adapters will apply it to the database schema or models.
Functions can be written to make use of the following argument properties:
Here is an example of a defaultValue function:
Tip: You can use async defaultValue functions to fill fields with data from API requests or Local API using req.payload.
Fields are automatically validated based on their Field Type and other Field Options such as required or min and max value constraints. If needed, however, field validations can be customized or entirely replaced by providing your own custom validation functions.
To set a custom field validation function, use the validate property in your Field Config:
Custom validation functions should return either true or a string representing the error message to display in API responses.
The following arguments are provided to the validate function:
 Argument 
 Description                                                                     
 value 
 The value of the field being validated.                                         
 ctx 
 An object with additional data and context. More details 
The ctx argument contains full document data, sibling field data, the current operation, and other useful information such as currently authenticated user:
The following additional properties are provided in the ctx object:
 Property      
 Description                                                                                                                                                  
 data 
 An object containing the full collection or global document currently being edited.                                                                          
 siblingData 
 An object containing document data that is scoped to only fields within the same parent of this field.                                                       
 operation 
 Will be create or update depending on the UI action or API call.                                                                                         
 path 
 The full path to the field in the schema, represented as an array of string segments, including array indexes. I.e ['group', 'myArray', '1', 'textField']. 
 id 
 The id of the current document being edited. id is undefined during the create operation.                                                            
 req 
 The current HTTP request object. Contains payload, user, etc.                                                                                            
 event 
 Either onChange or submit depending on the current action. Used as a performance opt-in. More details.                       
When using custom validation functions, Payload will use yours in place of the default. However, you might want to simply augment the default validation with your own custom logic.
To reuse default field validations, call them from within your custom validation function:
Here is a list of all default field validation functions:
Custom validation functions can also be asynchronous depending on your needs. This makes it possible to make requests to external services or perform other miscellaneous asynchronous logic.
When writing async validation functions, it is important to consider the performance implications. Validations are executed on every change to the field, so they should be as lightweight as possible. If you need to perform expensive validations, such as querying the database, consider using the event property in the ctx object to only run the validation on form submission.
To write asynchronous validation functions, use the async keyword to define your function:
All Collections automatically generate their own ID field. If needed, you can override this behavior by providing an explicit ID field to your config. This field should either be required or have a hook to generate the ID dynamically.
To define a custom ID field, add a top-level field with the name property set to id:
Reminder: The Custom ID Fields can only be of type Number or Text. Custom ID fields with type text must not contain / or . characters.
You can customize the appearance and behavior of fields within the Admin Panel through the admin property of any Field Config:
The following options are available:
 Option                  
 Description                                                                                                                                                                                                                      
 condition 
 Programmatically show / hide fields based on other fields. More details.                                                                                                                                   
 components 
 All Field Components can be swapped out for Custom Components that you define.                                                                                                                  
 description 
 Helper text to display alongside the field to provide more information for the editor. More details.                                                                                                             
 position 
 Specify if the field should be rendered in the sidebar by defining position: 'sidebar'.                                                                                                                                        
 width 
 Restrict the width of a field. You can pass any string-based value here, be it pixels, percentages, etc. This property is especially useful when fields are nested within a Row type where they can be organized horizontally. 
 style 
 CSS Properties to inject into the root element of the field.                                                                                                                 
 className 
 Attach a CSS class attribute to the root DOM element of a field.                                                                                             
 readOnly 
 Setting a field to readOnly has no effect on the API whatsoever but disables the admin component's editability to prevent editors from modifying the field's value.                                                            
 disabled 
 If a field is disabled, it is completely omitted from the Admin Panel entirely.                                                                                                                           
 disableBulkEdit 
 Set disableBulkEdit to true to prevent fields from appearing in the select options when making edits for multiple documents. Defaults to true for UI fields.                                                               
 disableListColumn 
 Set disableListColumn to true to prevent fields from appearing in the list view column selector.                                                                                                                             
 disableListFilter 
 Set disableListFilter to true to prevent fields from appearing in the list view filter options.                                                                                                                              
 hidden 
 Will transform the field into a hidden input type. Its value will still submit with requests in the Admin Panel, but the field itself will not be visible to editors.                                                          
Field Descriptions are used to provide additional information to the editor about a field, such as special instructions. Their placement varies from field to field, but typically are displayed with subtle style differences beneath the field inputs.
A description can be configured in three ways:
To add a Custom Description to a field, use the admin.description property in your Field Config:
Reminder: To replace the Field Description with a Custom Component, use the admin.components.Description property. More details.
Custom Descriptions can also be defined as a function. Description Functions are executed on the server and can be used to format simple descriptions based on the user's current Locale.
To add a Description Function to a field, set the admin.description property to a function in your Field Config:
All Description Functions receive the following arguments:
 Argument 
 Description                                                                                      
 t 
 The t function used to internationalize the Admin Panel. More details 
Note: If you need to subscribe to live updates within your form, use a Description Component instead. More details.
You can show and hide fields based on what other fields are doing by utilizing conditional logic on a field by field basis. The condition property on a field's admin config accepts a function which takes the following arguments:
 Argument          
 Description                                                                      
 data 
 The entire document's data that is currently being edited.                       
 siblingData 
 Only the fields that are direct siblings to the field with the condition.        
 ctx 
 An object containing additional information about the field’s location and user. 
The ctx object:
 Property        
 Description                                                                                                                                                  
 blockData 
 The nearest parent block's data. If the field is not inside a block, this will be undefined.                                                               
 path 
 The full path to the field in the schema, represented as an array of string segments, including array indexes. I.e ['group', 'myArray', '1', 'textField']. 
 user 
 The currently authenticated user object.                                                                                                                     
The condition function should return a boolean that will control if the field should be displayed or not.
Example:
Within the Admin Panel, fields are represented in three distinct places:
To swap in Field Components with your own, use the admin.components property in your Field Config:
The following options are available:
 Component         
 Description                                                                                                                   
 Field 
 The form field rendered of the Edit View. More details.                                                             
 Cell 
 The table cell rendered of the List View. More details.                                                              
 Filter 
 The filter component rendered in the List View. More details.                                                      
 Label 
 Override the default Label of the Field Component. More details.                                                    
 Error 
 Override the default Error of the Field Component. More details.                                                    
 Diff 
 Override the default Diff component rendered in the Version Diff View. More details.                                 
 Description 
 Override the default Description of the Field Component. More details.                                        
 beforeInput 
 An array of elements that will be added before the input of the Field Component. More details. 
 afterInput 
 An array of elements that will be added after the input of the Field Component. More details.  
The Field Component is the actual form field rendered in the Edit View. This is the input that user's will interact with when editing a document.
To swap in your own Field Component, use the admin.components.Field property in your Field Config:
For details on how to build Custom Components, see Building Custom Components.
Instead of replacing the entire Field Component, you can alternately replace or slot-in only specific parts by using the Label, Error, beforeInput, and afterInput properties.
All Field Components receive the following props by default:
 Property             
 Description                                                                                                                                                                                                                         
 docPreferences 
 An object that contains the Preferences for the document.                                                                                                                                                   
 field 
 In Client Components, this is the sanitized Client Field Config. In Server Components, this is the original Field Config. Server Components will also receive the sanitized field config through theclientField prop (see below). 
 locale 
 The locale of the field. More details.                                                                                                                                                             
 readOnly 
 A boolean value that represents if the field is read-only or not.                                                                                                                                                                   
 user 
 The currently authenticated user. More details.                                                                                                                                                       
 validate 
 A function that can be used to validate the field.                                                                                                                                                                                  
 path 
 A string representing the direct, dynamic path to the field at runtime, i.e. myGroup.myArray.0.myField.                                                                                                                           
 schemaPath 
 A string representing the direct, static path to the Field Config, i.e. posts.myGroup.myArray.myField.                                                                                                                            
 indexPath 
 A hyphen-notated string representing the path to the field within the nearest named ancestor field, i.e. 0-0 
In addition to the above props, all Server Components will also receive the following props:
 Property          
 Description                                                                   
 clientField 
 The serializable Client Field Config.                                         
 field 
 The Field Config.                                                             
 data 
 The current document being edited.                                            
 i18n 
 The i18n object.                                     
 payload 
 The Payload class.                                   
 permissions 
 The field permissions based on the currently authenticated user.              
 siblingData 
 The data of the field's siblings.                                             
 user 
 The currently authenticated user. More details. 
 value 
 The value of the field at render-time.                                        
When swapping out the Field component, you are responsible for sending and receiving the field's value from the form itself.
To do so, import the useField hook from @payloadcms/ui and use it to manage the field's value:
For a complete list of all available React hooks, see the Payload React Hooks documentation. For additional help, see Building Custom Components.
When building Custom Field Components, you can import the client field props to ensure type safety in your component. There is an explicit type for the Field Component, one for every Field Type and server/client environment. The convention is to prepend the field type onto the target type, i.e. TextFieldClientComponent:
See each individual Field Type for exact type imports.
The Cell Component is rendered in the table of the List View. It represents the value of the field when displayed in a table cell.
To swap in your own Cell Component, use the admin.components.Cell property in your Field Config:
All Cell Components receive the same Default Field Component Props, plus the following:
 Property      
 Description                                                           
 link 
 A boolean representing whether this cell should be wrapped in a link. 
 onClick 
 A function that is called when the cell is clicked.                   
For details on how to build Custom Components themselves, see Building Custom Components.
The Filter Component is the actual input element rendered within the "Filter By" dropdown of the List View used to represent this field when building filters.
To swap in your own Filter Component, use the admin.components.Filter property in your Field Config:
All Custom Filter Components receive the same Default Field Component Props.
For details on how to build Custom Components themselves, see Building Custom Components.
The Label Component is rendered anywhere a field needs to be represented by a label. This is typically used in the Edit View, but can also be used in the List View and elsewhere.
To swap in your own Label Component, use the admin.components.Label property in your Field Config:
All Custom Label Components receive the same Default Field Component Props.
For details on how to build Custom Components themselves, see Building Custom Components.
When building Custom Label Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Label Component, one for every Field Type and server/client environment. The convention is to append LabelServerComponent or LabelClientComponent to the type of field, i.e. TextFieldLabelClientComponent.
Alternatively to the Description Property, you can also use a Custom Component as the Field Description. This can be useful when you need to provide more complex feedback to the user, such as rendering dynamic field values or other interactive elements.
To add a Description Component to a field, use the admin.components.Description property in your Field Config:
All Custom Description Components receive the same Default Field Component Props.
For details on how to build a Custom Components themselves, see Building Custom Components.
When building Custom Description Components, you can import the component props to ensure type safety in your component. There is an explicit type for the Description Component, one for every Field Type and server/client environment. The convention is to append DescriptionServerComponent or DescriptionClientComponent to the type of field, i.e. TextFieldDescriptionClientComponent.
The Error Component is rendered when a field fails validation. It is typically displayed beneath the field input in a visually-compelling style.
To swap in your own Error Component, use the admin.components.Error property in your Field Config:
All Error Components receive the Default Field Component Props.
For details on how to build Custom Components themselves, see Building Custom Components.
When building Custom Error Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Error Component, one for every Field Type and server/client environment. The convention is to append ErrorServerComponent or ErrorClientComponent to the type of field, i.e. TextFieldErrorClientComponent.
The Diff Component is rendered in the Version Diff view. It will only be visible in entities with versioning enabled,
To swap in your own Diff Component, use the admin.components.Diff property in your Field Config:
All Error Components receive the Default Field Component Props.
For details on how to build Custom Components themselves, see Building Custom Components.
When building Custom Diff Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Diff Component, one for every Field Type and server/client environment. The convention is to append DiffServerComponent or DiffClientComponent to the type of field, i.e. TextFieldDiffClientComponent.
With these properties you can add multiple components before and after the input element, as their name suggests. This is useful when you need to render additional elements alongside the field without replacing the entire field component.
To add components before and after the input element, use the admin.components.beforeInput and admin.components.afterInput properties in your Field Config:
All afterInput and beforeInput Components receive the same Default Field Component Props.
For details on how to build Custom Components, see Building Custom Components.
You can import the Payload Field type as well as other common types from the payload package. More details.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/array

The Array Field is used when you need to have a set of "repeating" Fields. It stores an array of objects containing fields that you define. These fields can be of any type, including other arrays, to achieve infinitely nested data structures.
Arrays are useful for many different types of content from simple to complex, such as:
To create an Array Field, set the type to array in your Field Config:
 Option                 
 Description                                                                                                                                                                                                                                                                        
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as the heading in the Admin Panel or an object with keys for each language. Auto-generated from name if not defined.                                                                                                                                
 fields *        
 Array of field types to correspond to each row of the Array.                                                                                                                                                                                                                       
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 minRows 
 A number for the fewest allowed items during validation when a value is present.                                                                                                                                                                                                   
 maxRows 
 A number for the most allowed items during validation when a value is present.                                                                                                                                                                                                     
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                                                                                                                                    
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                                                                                                                              
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                                                                                                                                 
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                                                                                                                                   
 defaultValue 
 Provide an array of row data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config. If enabled, a separate, localized set of all data within this Array will be kept, so there is no need to specify each nested field as localized. 
 required 
 Require this field to have a value.                                                                                                                                                                                                                                                
 labels 
 Customize the row labels appearing in the Admin dashboard.                                                                                                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                                                                                                                                      
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                                                                          
 interfaceName 
 Create a top level, reusable Typescript interface & GraphQL type.                                                                                                
 dbName 
 Custom table name for the field when using SQL Database Adapter (Postgres). Auto-generated from name if not defined.                                                                                                                                    
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                                                                                                                        
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Array Field in the Admin Panel, you can use the admin option:
The Array Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option                    
 Description                                                                         
 initCollapsed 
 Set the initial collapsed state                                                     
 components.RowLabel 
 React component to be rendered as the label on the array row. Example 
 isSortable 
 Disable order sorting by setting this value to false 
In this example, we have an Array Field called slider that contains a set of fields for a simple image slider. Each row in the array has a title, image, and caption. We also customize the row label to display the title if it exists, or a default label if it doesn't.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/blocks

The Blocks Field is incredibly powerful, storing an array of objects based on the fields that you define, where each item in the array is a "block" with its own unique schema.
Blocks are a great way to create a flexible content model that can be used to build a wide variety of content types, including:
To add a Blocks Field, set the type to blocks in your Field Config:
 Option                 
 Description                                                                                                                                                                                                                                                                        
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as the heading in the Admin Panel or an object with keys for each language. Auto-generated from name if not defined.                                                                                                                                                     
 blocks *        
 Array of block configs to be made available to this field.                                                                                                                                                                                    
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 minRows 
 A number for the fewest allowed items during validation when a value is present.                                                                                                                                                                                                   
 maxRows 
 A number for the most allowed items during validation when a value is present.                                                                                                                                                                                                     
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                                                                                                                                    
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                                                                                                                              
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                                                                                                                                 
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API response or the Admin Panel.                                                                                                                          
 defaultValue 
 Provide an array of block data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config. If enabled, a separate, localized set of all data within this field will be kept, so there is no need to specify each nested field as localized. 
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                                                                                                                       
 labels 
 Customize the block row labels appearing in the Admin dashboard.                                                                                                                                                                                                                   
 admin 
 Admin-specific configuration. More details.                                                                                                                                                                                                                      
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                                                                          
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                                                                                                                        
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Blocks Field in the Admin Panel, you can use the admin option:
The Blocks Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option                 
 Description                                                                
 group 
 Text or localization object used to group this Block in the Blocks Drawer. 
 initCollapsed 
 Set the initial collapsed state                                            
 isSortable 
 Disable order sorting by setting this value to false 
 disableBlockName 
 Hide the blockName field by setting this value to true 
If you're using this block within the Lexical editor, you can also customize how the block is rendered in the Lexical editor itself by specifying custom components.
This is super handy if you'd like to present your editors with a very deliberate and nicely designed block "preview" right in your rich text.
For example, if you have a gallery block, you might want to actually render the gallery of images directly in your Lexical block. With the admin.components.Block property, you can do exactly that!
Tip: If you customize the way your block is rendered in Lexical, you can import utility components to easily edit / remove your block - so that you don't have to build all of this yourself.
To import these utility components for one of your custom blocks, you can import the following:
Blocks are defined as separate configs of their own.
Tip: Best practice is to define each block config in its own file, and then import them into your Blocks field as necessary. This way each block config can be easily shared between fields. For instance, using the "layout builder" example, you might want to feature a few of the same blocks in a Post collection as well as a Page collection. Abstracting into their own files trivializes their reusability.
 Option                     
 Description                                                                                                                                                                         
 slug *              
 Identifier for this block type. Will be saved on each block as the blockType property.                                                                                            
 fields *            
 Array of fields to be stored in this block.                                                                                                                                         
 labels 
 Customize the block labels that appear in the Admin dashboard. Auto-generated from slug if not defined.                                                                             
 imageURL 
 Provide a custom image thumbnail to help editors identify this block in the Admin UI.                                                                                               
 imageAltText 
 Customize this block's image thumbnail alt text.                                                                                                                                    
 interfaceName 
 Create a top level, reusable Typescript interface & GraphQL type. 
 graphQL.singularName 
 Text to use for the GraphQL schema name. Auto-generated from slug if not defined. NOTE: this is set for deprecation, prefer interfaceName.                                        
 dbName 
 Custom table name for this block type when using SQL Database Adapter (Postgres). Auto-generated from slug if not defined.                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                           
In addition to the field data that you define on each block, Payload will store two additional properties on each block:
blockType
The blockType is saved as the slug of the block that has been selected.
blockName
The Admin Panel provides each block with a blockName field which optionally allows editors to label their blocks for better editability and readability. This can be visually hidden via admin.disableBlockName.
collections/ExampleCollection.js
If you have multiple blocks used in multiple places, your Payload Config can grow in size, potentially sending more data to the client and requiring more processing on the server. However, you can optimize performance by defining each block once in your Payload Config and then referencing its slug wherever it's used instead of passing the entire block config.
To do this, define the block in the blocks array of the Payload Config. Then, in the Blocks Field, pass the block slug to the blockReferences array - leaving the blocks array empty for compatibility reasons.
 Reminder: Blocks referenced in the blockReferences array are treated as isolated from the collection / global config. This has the following implications:
As you build your own Block configs, you might want to store them in separate files but retain typing accordingly. To do so, you can import and use Payload's Block type:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/checkbox

The Checkbox Field saves a boolean in the database.
To add a Checkbox Field, set the type to checkbox in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value, will default to false if field is also required. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                     
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
Here is an example of a Checkbox Field in a Collection:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/json

The JSON Field saves raw JSON to the database and provides the Admin Panel with a code editor styled interface. This is different from the Code Field which saves the value as a string in the database.
To add a JSON Field, set the type to json in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 jsonSchema 
 Provide a JSON schema that will be used for validation. JSON schemas 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the JSON Field in the Admin Panel, you can use the admin option:
The JSON Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option              
 Description                                                                                                                                                   
 editorOptions 
 Options that can be passed to the monaco editor, view the full list. 
collections/ExampleCollection.ts
Payload JSON fields fully support the JSON schema standard. By providing a schema in your field config, the editor will be guided in the admin UI, getting typeahead for properties and their formats automatically. When the document is saved, the default validation will prevent saving any invalid data in the field according to the schema in your config.
If you only provide a URL to a schema, Payload will fetch the desired schema if it is publicly available. If not, it is recommended to add the schema directly to your config or import it from another file so that it can be implemented consistently in your project.
collections/ExampleCollection.ts
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/code

The Code Field saves a string in the database, but provides the Admin Panel with a code editor styled interface.
To add a Code Field, set the type to code in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 minLength 
 Used by the default validation function to ensure values are of a minimum character length.                                                                                 
 maxLength 
 Used by the default validation function to ensure values are of a maximum character length.                                                                                 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. See below for more detail.                                                                                                  
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Code Field in the Admin Panel, you can use the admin option:
The Code Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option              
 Description                                                                                                                                                                     
 language 
 This property can be set to any language listed here.                                               
 editorOptions 
 Options that can be passed to the monaco editor, view the full list. 
`collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/collapsible

The Collapsible Field is presentational-only and only affects the Admin Panel. By using it, you can place fields within a nice layout component that can be collapsed / expanded.
To add a Collapsible Field, set the type to collapsible in your Field Config:
 Option          
 Description                                                                                                                                                                  
 label *  
 A label to render within the header of the collapsible component. This can be a string, function or react component. Function/components receive ({ data, path }) as args. 
 fields * 
 Array of field types to nest within this Collapsible.                                                                                                                        
 admin 
 Admin-specific configuration. More details.                                                                                                                
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                    
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Collapsible Field in the Admin Panel, you can use the admin option:
The Collapsible Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option              
 Description                     
 initCollapsed 
 Set the initial collapsed state 
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/date

The Date Field saves a Date in the database and provides the Admin Panel with a customizable time picker interface.
To add a Date Field, set the type to date in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 timezone *      
 Set to true to enable timezone selection on this field. More details.                                                                                       
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Date Field in the Admin Panel, you can use the admin option:
The Date Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Property                       
 Description                                                                                                                            
 placeholder 
 Placeholder text for the field.                                                                                                        
 date 
 Pass options to customize date field appearance.                                                                                       
 date.displayFormat 
 Format date to be shown in field cell.                                                                                             
 date.pickerAppearance * 
 Determines the appearance of the datepicker: dayAndTime timeOnly dayOnly monthOnly.                                            
 date.monthsToShow *     
 Number of months to display max is 2. Defaults to 1.                                                                                   
 date.minDate *          
 Min date value to allow.                                                                                                               
 date.maxDate *          
 Max date value to allow.                                                                                                               
 date.minTime *          
 Min time value to allow.                                                                                                               
 date.maxTime *          
 Max date value to allow.                                                                                                               
 date.overrides *        
 Pass any valid props directly to the react-datepicker 
 date.timeIntervals *    
 Time intervals to display. Defaults to 30 minutes.                                                                                     
 date.timeFormat *       
 Determines time format. Defaults to 'h:mm aa'.                                                                                       
* This property is passed directly to react-datepicker.
These properties only affect how the date is displayed in the UI. The full date is always stored in the format YYYY-MM-DDTHH:mm:ss.SSSZ (e.g. 1999-01-01T8:00:00.000+05:00).
displayFormat determines how the date is presented in the field cell, you can pass any valid unicode date format.
pickerAppearance sets the appearance of the react datepicker, the options available are dayAndTime, dayOnly, timeOnly, and monthOnly. By default, the datepicker will display dayOnly.
When only pickerAppearance is set, an equivalent format will be rendered in the date field cell. To overwrite this format, set displayFormat.
collections/ExampleCollection.ts
To enable timezone selection on a Date field, set the timezone property to true:
This will add a dropdown to the date picker that allows users to select a timezone. The selected timezone will be saved in the database along with the date in a new column named date_tz.
You can customise the available list of timezones in the global admin config.
 Good to know: The date itself will be stored in UTC so it's up to you to handle the conversion to the user's timezone when displaying the date in your frontend.
Dates without a specific time are normalised to 12:00 in the selected timezone.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/email

The Email Field enforces that the value provided is a valid email address.
To create an Email Field, set the type to email in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Email Field in the Admin Panel, you can use the admin option:
The Email Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Property           
 Description                                                               
 placeholder 
 Set this property to define a placeholder string for the field.           
 autoComplete 
 Set this property to a string that will be used for browser autocomplete. 
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/group

The Group Field allows Fields to be nested under a common property name. It also groups fields together visually in the Admin Panel.
To add a Group Field, set the type to group in your Field Config:
 Option                 
 Description                                                                                                                                                                                                                                                                        
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 fields *        
 Array of field types to nest within this Group.                                                                                                                                                                                                                                    
 label 
 Used as a heading in the Admin Panel and to name the generated GraphQL type.                                                                                                                                                                                                       
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                                                                                                                                    
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                                                                                                                              
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                                                                                                                                 
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                                                                                                                                   
 defaultValue 
 Provide an object of data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config. If enabled, a separate, localized set of all data within this Group will be kept, so there is no need to specify each nested field as localized. 
 admin 
 Admin-specific configuration. More details.                                                                                                                                                                                                                      
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                                                                          
 interfaceName 
 Create a top level, reusable Typescript interface & GraphQL type.                                                                                                
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                                                                                                                        
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Group Field in the Admin Panel, you can use the admin option:
The Group Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option           
 Description                                                                                                                                                                                                                                      
 hideGutter 
 Set this property to true to hide this field's gutter within the Admin Panel. The field gutter is rendered as a vertical line and padding, but often if this field is nested within a Group, Block, or Array, you may want to hide the gutter. 
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/number

The Number Field stores and validates numeric entry and supports additional numerical validation and formatting features.
To add a Number Field, set the type to number in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 min 
 Minimum value accepted. Used in the default validation function.                                                                                                          
 max 
 Maximum value accepted. Used in the default validation function.                                                                                                          
 hasMany 
 Makes this field an ordered array of numbers instead of just a single number.                                                                                               
 minRows 
 Minimum number of numbers in the numbers array, if hasMany is set to true.                                                                                                
 maxRows 
 Maximum number of numbers in the numbers array, if hasMany is set to true.                                                                                                
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Number Field in the Admin Panel, you can use the admin option:
The Number Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Property           
 Description                                                                       
 step 
 Set a value for the number field to increment / decrement using browser controls. 
 placeholder 
 Set this property to define a placeholder string for the field.                   
 autoComplete 
 Set this property to a string that will be used for browser autocomplete.         
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/point

The Point Field saves a pair of coordinates in the database and assigns an index for location related queries. The data structure in the database matches the GeoJSON structure to represent point. The Payload API simplifies the object data to only the [longitude, latitude] location.
To add a Point Field, set the type to point in your Field Config:
Important: The Point Field currently is not supported in SQLite.
 Option                 
 Description                                                                                                                                                                               
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Used as a field label in the Admin Panel and to name the generated GraphQL type.                                                                                                          
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                              
 index 
 Build an index for this field to produce faster queries. To support location queries, point index defaults to 2dsphere, to disable the index set to false. 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                                           
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                                     
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                                        
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                                          
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                                           
 required 
 Require this field to have a value.                                                                                                                                                       
 admin 
 Admin-specific configuration. More details.                                                                                                                   
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                                 
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                               
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
collections/ExampleCollection.ts
In order to do query based on the distance to another point, you can use the near operator. When querying using the near operator, the returned documents will be sorted by nearest first.
In order to do query based on whether points are within a specific area defined in GeoJSON, you can use the within operator. Example:
In order to do query based on whether points intersect a specific area defined in GeoJSON, you can use the intersects operator. Example:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/radio

The Radio Field allows for the selection of one value from a predefined set of possible values and presents a radio group-style set of inputs to the Admin Panel.
To add a Radio Field, set the type to radio in your Field Config:
 Option                 
 Description                                                                                                                                                                         
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 options *       
 Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing an label string and a value string.                          
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                             
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often.         
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                                     
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                               
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                                  
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                                    
 defaultValue 
 Provide data to be used for this field's default value. The default value must exist within provided values in options. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                                     
 required 
 Require this field to have a value.                                                                                                                                                 
 admin 
 Admin-specific configuration. More details.                                                                                                                       
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                           
 enumName 
 Custom enum name for this field when using SQL Database Adapter (Postgres). Auto-generated from name if not defined.                                     
 interfaceName 
 Create a top level, reusable Typescript interface & GraphQL type. 
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                         
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
 Important:
Option values should be strings that do not contain hyphens or special characters due to GraphQL enumeration naming constraints. Underscores are allowed. If you determine you need your option values to be non-strings or contain special characters, they will be formatted accordingly before being used as a GraphQL enum.
To customize the appearance and behavior of the Radio Field in the Admin Panel, you can use the admin option:
The Radio Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Property     
 Description                                                                                                                  
 layout 
 Allows for the radio group to be styled as a horizontally or vertically distributed list. The default value is horizontal. 
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/relationship

The Relationship Field is one of the most powerful fields Payload features. It provides the ability to easily relate documents together.
The Relationship field is used in a variety of ways, including:
To add a Relationship Field, set the type to relationship in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 relationTo *    
 Provide one or many collection slugs to be able to assign relationships to.                                                                                               
 filterOptions 
 A query to filter which options appear in the UI and validate against. More.                                                             
 hasMany 
 Boolean when, if set to true, allows this field to have many relations instead of only one.                                                                               
 minRows 
 A number for the fewest allowed items during validation when a value is present. Used with hasMany.                                                                       
 maxRows 
 A number for the most allowed items during validation when a value is present. Used with hasMany.                                                                         
 maxDepth 
 Sets a maximum population depth for this field, regardless of the remaining depth when this field is reached. Max Depth 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
 graphQL 
 Custom graphQL configuration for the field. More details 
* An asterisk denotes that a property is required.
Tip: The Depth parameter can be used to automatically populate related documents that are returned by the API.
To the appearance and behavior of the Relationship Field in the Admin Panel, you can use the admin option:
The Relationship Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Property          
 Description                                                                                                                                 
 isSortable 
 Set to true if you'd like this field to be sortable within the Admin UI using drag and drop (only works when hasMany is set to true). 
 allowCreate 
 Set to false if you'd like to disable the ability to create new documents from within the relationship field.                             
 allowEdit 
 Set to false if you'd like to disable the ability to edit documents from within the relationship field.                                   
 sortOptions 
 Define a default sorting order for the options within a Relationship field's dropdown. More 
You can specify sortOptions in two ways:
As a string:
Provide a string to define a global default sort field for all relationship field dropdowns across different collections. You can prefix the field name with a minus symbol ("-") to sort in descending order.
Example:
This configuration will sort all relationship field dropdowns by "fieldName" in ascending order.
As an object :
Specify an object where keys are collection slugs and values are strings representing the field names to sort by. This allows for different sorting fields for each collection's relationship dropdown.
Example:
In this configuration:
Note: If sortOptions is not defined, the default sorting behavior of the Relationship field dropdown will be used.
Options can be dynamically limited by supplying a query constraint, which will be used both for validating input and filtering available relationships in the UI.
The filterOptions property can either be a Where query, or a function returning true to not filter, false to prevent all, or a Where query. When using a function, it will be called with an argument object with the following properties:
 Property      
 Description                                                                                                                                                                              
 blockData 
 The data of the nearest parent block. Will be undefined if the field is not within a block or when called on a Filter component within the list view.                                
 data 
 An object containing the full collection or global document currently being edited. Will be an empty object when called on a Filter component within the list view.                    
 id 
 The id of the current document being edited. Will be undefined during the create operation or when called on a Filter component within the list view.                            
 relationTo 
 The collection slug to filter against, limited to this field's relationTo property.                                                                                                  
 req 
 The Payload Request, which contains references to payload, user, locale, and more.                                                                                                 
 siblingData 
 An object containing document data that is scoped to only fields within the same parent of this field. Will be an emprt object when called on a Filter component within the list view. 
 user 
 An object containing the currently authenticated user.                                                                                                                                   
You can learn more about writing queries here.
 Note:
When a relationship field has both filterOptions and a custom validate function, the api will not validate filterOptions unless you call the default relationship field validation function imported from payload/shared in your validate function.
The relationship field on its own is used to define relationships for the document that contains the relationship field, and this can be considered as a "one-way" relationship. For example, if you have a Post that has a category relationship field on it, the related category itself will not surface any information about the posts that have the category set.
However, the relationship field can be used in conjunction with the Join field to produce powerful bi-directional relationship authoring capabilities. If you're interested in bi-directional relationships, check out the documentation for the Join field.
Given the variety of options possible within the relationship field type, the shape of the data needed for creating and updating these fields can vary. The following sections will describe the variety of data shapes that can arise from this field.
The most simple pattern of a relationship is to use hasMany: false with a relationTo that allows for only one type of collection.
The shape of the data to save for a document with the field configured this way would be:
When querying documents in this collection via REST API, you could query as follows:
?where[owner][equals]=6031ac9e1289176380734024.
Also known as dynamic references, in this configuration, the relationTo field is an array of Collection slugs that tells Payload which Collections are valid to reference.
The shape of the data to save for a document with more than one relationship type would be:
Here is an example for how to query documents by this data (note the difference in referencing the owner.value):
?where[owner.value][equals]=6031ac9e1289176380734024.
You can also query for documents where a field has a relationship to a specific Collection:
?where[owners.relationTo][equals]=organizations.
This query would return only documents that have an owner relationship to organizations.
The hasMany tells Payload that there may be more than one collection saved to the field.
To save to the hasMany relationship field we need to send an array of IDs:
When querying documents, the format does not change for arrays:
?where[owners][equals]=6031ac9e1289176380734024.
Relationship fields with hasMany set to more than one kind of collections save their data as an array of objects—each containing the Collection slug as the relationTo value, and the related document id for the value:
Querying is done in the same way as the earlier Polymorphic example:
?where[owners.value][equals]=6031ac9e1289176380734024.
Polymorphic and non-polymorphic relationships must be queried differently because of how the related data is stored and may be inconsistent across different collections. Because of this, filtering polymorphic relationship fields from the Collection List admin UI is limited to the id value.
For a polymorphic relationship, the response will always be an array of objects. Each object will contain the relationTo and value properties.
The data can be queried by the related document ID:
?where[field.value][equals]=6031ac9e1289176380734024.
Or by the related document Collection slug:
?where[field.relationTo][equals]=your-collection-slug.
However, you cannot query on any field values within the related document. Since we are referencing multiple collections, the field you are querying on may not exist and break the query.
 Note:
You cannot query on a field within a polymorphic relationship as you would with a non-polymorphic relationship.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/rich-text

The Rich Text Field lets editors write and format dynamic content in a familiar interface. The content is saved as JSON in the database and can be converted to HTML or any other format needed.
Consistent with Payload's goal of making you learn as little of Payload as possible, customizing and using the Rich Text Editor does not involve learning how to develop for a Payload rich text editor.
Instead, you can invest your time and effort into learning the underlying open-source tools that will allow you to apply your learnings elsewhere as well.
 Option                 
 Description                                                                                                                                                      
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                          
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                     
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                            
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                               
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                 
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                     
 required 
 Require this field to have a value.                                                                                                                              
 admin 
 Admin-specific configuration. More details.                                                                                                    
 editor 
 Customize or override the rich text editor. More details.                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                        
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                      
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Rich Text Field in the Admin Panel, you can use the admin option. The Rich Text Field inherits all the default options from the base Field Admin Config.
Further customization can be done with editor-specific options.
For a ton more editor-specific options, including how to build custom rich text elements directly into your editor, take a look at the rich text editor documentation.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/join

The Join Field is used to make Relationship and Upload fields available in the opposite direction. With a Join you can edit and view collections having reference to a specific collection document. The field itself acts as a virtual field, in that no new data is stored on the collection with a Join field. Instead, the Admin UI surfaces the related documents for a better editing experience and is surfaced by Payload's APIs.
The Join field is useful in scenarios including:
For the Join field to work, you must have an existing relationship or upload field in the collection you are joining. This will reference the collection and path of the field of the related documents. To add a Relationship Field, set the type to join in your Field Config:
In this example, the field is defined to show the related posts when added to a category collection. The on property is used to specify the relationship field name of the field that relates to the collection document.
With this example, if you navigate to a Category in the Admin UI or an API response, you'll now see that the Posts which are related to the Category are populated for you. This is extremely powerful and can be used to define a wide variety of relationship types in an easy manner.
The Join field is extremely performant and does not add additional query overhead to your API responses until you add depth of 1 or above. It works in all database adapters. In MongoDB, we use aggregations to automatically join in related documents, and in relational databases, we use joins.
The Join Field is not supported in DocumentDB and Azure Cosmos DB, as we internally use MongoDB aggregations to query data for that field, which are limited there. This can be changed in the future.
When modeling your database, you might come across many places where you'd like to feature bi-directional relationships. But here's an important consideration—you generally only want to store information about a given relationship in one place.
Let's take the Posts and Categories example. It makes sense to define which category a post belongs to while editing the post.
It would generally not be necessary to have a list of post IDs stored directly on the category as well, for a few reasons:
This is where the join field is especially powerful. With it, you only need to store the category_id on the post, and Payload will automatically join in related posts for you when you query for categories. The related category is only stored on the post itself - and is not duplicated on both sides. However, the join field is what enables bi-directional APIs and UI for you.
For typical polymorphic / many relationships, if you're using Postgres or SQLite, Payload will automatically create a posts_rels table, which acts as a junction table to store all of a given document's relationships.
However, this might not be appropriate for your use case if you'd like to have more control over your database architecture. You might not want to have that _rels table, and would prefer to maintain / control your own junction table design.
With the Join field, you can control your own junction table design, and avoid Payload's automatic _rels table creation.
The join field can be used in conjunction with any collection - and if you wanted to define your own "junction" collection, which, say, is called categories_posts and has a post_id and a category_id column, you can achieve complete control over the shape of that junction table.
You could go a step further and leverage the admin.hidden property of the categories_posts collection to hide the collection from appearing in the Admin UI navigation.
Another very powerful use case of the join field is to be able to define "context" fields on your relationships. Let's say that you have Posts and Categories, and use join fields on both your Posts and Categories collection to join in related docs from a new pseudo-junction collection called categories_posts. Now, the relations are stored in this third junction collection, and can be surfaced on both Posts and Categories. But, importantly, you could add additional "context" fields to this shared junction collection.
For example, on this categories_posts collection, in addition to having the category and post fields, we could add custom "context" fields like featured or spotlight, which would allow you to store additional information directly on relationships. The join field gives you complete control over any type of relational architecture in Payload, all wrapped up in a powerful Admin UI.
 Option                 
 Description                                                                                                                                                                                                                            
 name *          
 To be used as the property name when retrieved from the database. More 
 collection *    
 The slugs having the relationship field or an array of collection slugs.                                                                                                                                                             
 on *            
 The name of the relationship or upload field that relates to the collection document. Use dot notation for nested paths, like 'myGroup.relationName'. If collection is an array, this field must exist for all specified collections 
 orderable 
 If true, enables custom ordering and joined documents can be reordered via drag and drop. Uses fractional indexing for efficient reordering.                    
 where 
 A Where query to hide related documents from appearing. Will be merged with any where specified in the request.                                                                                                                    
 maxDepth 
 Default is 1, Sets a maximum population depth for this field, regardless of the remaining depth when this field is reached. Max Depth.                                                                   
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                                                                                
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                                                                                  
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                                                                                     
 defaultLimit 
 The number of documents to return. Set to 0 to return all related documents.                                                                                                                                                           
 defaultSort 
 The field name used to specify the order the joined documents are returned.                                                                                                                                                            
 admin 
 Admin-specific configuration. More details.                                                                                                                                                                   
 custom 
 Extension point for adding custom data (e.g. for plugins).                                                                                                                                                                             
 typescriptSchema 
 Override field type generation with providing a JSON schema.                                                                                                                                                                           
 graphQL 
 Custom graphQL configuration for the field. More details 
* An asterisk denotes that a property is required.
You can control the user experience of the join field using the admin config properties. The following options are supported:
 Option                 
 Description                                                                                                                
 defaultColumns 
 Array of field names that correspond to which columns to show in the relationship table. Default is the collection config. 
 allowCreate 
 Set to false to remove the controls for making new related documents from this field.                                    
 components.Label 
 Override the default Label of the Field Component. More details 
When a document is returned that for a Join field is populated with related documents. The structure returned is an object with:
When a document is returned that for a polymorphic Join field (with collection as an array) is populated with related documents. The structure returned is an object with:
The Join Field supports custom queries to filter, sort, and limit the related documents that will be returned. In addition to the specific query options for each Join Field, you can pass joins: false to disable all Join Field from returning. This is useful for performance reasons when you don't need the related documents.
The following query options are supported:
 Property    
 Description                                                                                         
 limit 
 The maximum related documents to be returned, default is 10.                                        
 where 
 An optional Where query to filter joined documents. Will be merged with the field where object. 
 sort 
 A string used to order related results                                                              
 count 
 Whether include the count of related documents or not. Not included by default                      
These can be applied to the Local API, GraphQL, and REST API.
By adding joins to the Local API you can customize the request for each join field by the name of the field.
Currently, Where query support on joined documents for join fields with an array of collection is limited and not supported for fields inside arrays and blocks.
Currently, querying by the Join Field itself is not supported, meaning:
does not work yet.
The REST API supports the same query options as the Local API. You can use the joins query parameter to customize the request for each join field by the name of the field. For example, an API call to get a document with the related posts limited to 5 and sorted by title:
/api/categories/${id}?joins[relatedPosts][limit]=5&joins[relatedPosts][sort]=title
You can specify as many joins parameters as needed for the same or different join fields for a single request.
The GraphQL API supports the same query options as the local and REST APIs. You can specify the query options for each join field in your query.
Example:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/row

The Row Field is presentational-only and only affects the Admin Panel. By using it, you can arrange Fields next to each other horizontally.
To add a Row Field, set the type to row in your Field Config:
 Option          
 Description                                                                                                               
 fields * 
 Array of field types to nest within this Row.                                                                             
 admin 
 Admin-specific configuration excluding description, readOnly, and hidden. More details. 
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                 
* An asterisk denotes that a property is required.
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/select

The Select Field provides a dropdown-style interface for choosing options from a predefined list as an enumeration.
To add a Select Field, set the type to select in your Field Config:
 Option                 
 Description                                                                                                                                                                         
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 options *       
 Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing a label string and a value string.                           
 hasMany 
 Boolean when, if set to true, allows this field to have many selections instead of only one.                                                                                      
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                             
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                        
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often.         
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                                     
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                               
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                                  
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                                    
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                                     
 required 
 Require this field to have a value.                                                                                                                                                 
 admin 
 Admin-specific configuration. See the default field admin config for more details.                                                           
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                           
 enumName 
 Custom enum name for this field when using SQL Database Adapter (Postgres). Auto-generated from name if not defined.                                     
 dbName 
 Custom table name (if hasMany set to true) for this field when using SQL Database Adapter (Postgres). Auto-generated from name if not defined.       
 interfaceName 
 Create a top level, reusable Typescript interface & GraphQL type. 
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                         
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
Important: Option values should be strings that do not contain hyphens or special characters due to GraphQL enumeration naming constraints. Underscores are allowed. If you determine you need your option values to be non-strings or contain special characters, they will be formatted accordingly before being used as a GraphQL enum.
To customize the appearance and behavior of the Select Field in the Admin Panel, you can use the admin option:
The Select Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Property          
 Description                                                                                                                                 
 isClearable 
 Set to true if you'd like this field to be clearable within the Admin UI.                                                                 
 isSortable 
 Set to true if you'd like this field to be sortable within the Admin UI using drag and drop. (Only works when hasMany is set to true) 
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/tabs

The Tabs Field is presentational-only and only affects the Admin Panel (unless a tab is named). By using it, you can place fields within a nice layout component that separates certain sub-fields by a tabbed interface.
To add a Tabs Field, set the type to tabs in your Field Config:
 Option        
 Description                                                             
 tabs * 
 Array of tabs to render within this Tabs field.                         
 admin 
 Admin-specific configuration. More details. 
 custom 
 Extension point for adding custom data (e.g. for plugins)               
Each tab must have either a name or label and the required fields array. You can also optionally pass a description to render within each individual tab.
 Option              
 Description                                                                                                                                                                                                  
 name 
 Groups field data into an object when stored and retrieved from the database. More 
 label 
 The label to render on the tab itself. Required when name is undefined, defaults to name converted to words.                                                                                                 
 fields *     
 The fields to render within this tab.                                                                                                                                                                        
 description 
 Optionally render a description within this tab to describe the contents of the tab itself.                                                                                                                  
 interfaceName 
 Create a top level, reusable Typescript interface & GraphQL type. (name must be present) 
 virtual 
 Provide true to disable field in the database (name must be present). See Virtual Fields 
* An asterisk denotes that a property is required.
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/text

The Text Field is one of the most commonly used fields. It saves a string to the database and provides the Admin Panel with a simple text input.
To add a Text Field, set the type to text in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 minLength 
 Used by the default validation function to ensure values are of a minimum character length.                                                                                 
 maxLength 
 Used by the default validation function to ensure values are of a maximum character length.                                                                                 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 hasMany 
 Makes this field an ordered array of text instead of just a single text.                                                                                                    
 minRows 
 Minimum number of texts in the array, if hasMany is set to true.                                                                                                          
 maxRows 
 Maximum number of texts in the array, if hasMany is set to true.                                                                                                          
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Text Field in the Admin Panel, you can use the admin option:
The Text Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option             
 Description                                                                                                                 
 placeholder 
 Set this property to define a placeholder string in the text input.                                                         
 autoComplete 
 Set this property to a string that will be used for browser autocomplete.                                                   
 rtl 
 Override the default text direction of the Admin Panel for this field. Set to true to force right-to-left text direction. 
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/textarea

The Textarea Field is nearly identical to the Text Field but it features a slightly larger input that is better suited to edit longer text.
To add a Textarea Field, set the type to textarea in your Field Config:
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 minLength 
 Used by the default validation function to ensure values are of a minimum character length.                                                                                 
 maxLength 
 Used by the default validation function to ensure values are of a maximum character length.                                                                                 
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. More details.                                                                                                               
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
* An asterisk denotes that a property is required.
To customize the appearance and behavior of the Textarea Field in the Admin Panel, you can use the admin option:
The Textarea Field inherits all of the default options from the base Field Admin Config, plus the following additional options:
 Option             
 Description                                                                                                                 
 placeholder 
 Set this property to define a placeholder string in the textarea.                                                           
 autoComplete 
 Set this property to a string that will be used for browser autocomplete.                                                   
 rows 
 Set the number of visible text rows in the textarea. Defaults to 2 if not specified.                                      
 rtl 
 Override the default text direction of the Admin Panel for this field. Set to true to force right-to-left text direction. 
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/ui

The UI (user interface) Field gives you a ton of power to add your own React components directly into the Admin Panel, nested directly within your other fields. It has absolutely no effect on the data of your documents. It is presentational-only. Think of it as a way for you to "plug in" your own React components directly within your other fields, so you can provide your editors with new controls exactly where you want them to go.
With the UI Field, you can:
To add a UI Field, set the type to ui in your Field Config:
 Option                          
 Description                                                                                                
 name *                   
 A unique identifier for this field.                                                                        
 label 
 Human-readable label for this UI field.                                                                    
 admin.components.Field * 
 React component to be rendered for this field within the Edit View. More 
 admin.components.Cell 
 React component to be rendered as a Cell within collection List views. More 
 admin.disableListColumn 
 Set disableListColumn to true to prevent the UI field from appearing in the list view column selector. 
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                  
* An asterisk denotes that a property is required.
collections/ExampleCollection.ts
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/fields/upload

The Upload Field allows for the selection of a Document from a Collection supporting Uploads, and formats the selection as a thumbnail in the Admin Panel.
Upload fields are useful for a variety of use cases, such as:
To create an Upload Field, set the type to upload in your Field Config:
Important: To use the Upload Field, you must have a Collection configured to allow Uploads.
 Option                 
 Description                                                                                                                                                                 
 name *          
 To be used as the property name when stored and retrieved from the database. More 
 relationTo *    
 Provide a single collection slug to allow this field to accept a relation to. Note: the related collection must be configured to support Uploads. 
 filterOptions 
 A query to filter which options appear in the UI and validate against. More.                                                                   
 hasMany 
 Boolean which, if set to true, allows this field to have many relations instead of only one.                                                                                
 minRows 
 A number for the fewest allowed items during validation when a value is present. Used with hasMany.                                                                         
 maxRows 
 A number for the most allowed items during validation when a value is present. Used with hasMany.                                                                           
 maxDepth 
 Sets a number limit on iterations of related documents to populate when queried. Depth 
 label 
 Text used as a field label in the Admin Panel or an object with keys for each language.                                                                                     
 unique 
 Enforce that each entry in the Collection has a unique value for this field.                                                                                                
 validate 
 Provide a custom validation function that will be executed on both the Admin Panel and the backend. More 
 index 
 Build an index for this field to produce faster queries. Set this field to true if your users will perform queries on this field's data often. 
 saveToJWT 
 If this field is top-level and nested in a config supporting Authentication, include its data in the user JWT.                             
 hooks 
 Provide Field Hooks to control logic for this field. More details.                                                                                       
 access 
 Provide Field Access Control to denote what users can see and do with this field's data. More details.                                          
 hidden 
 Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.                            
 defaultValue 
 Provide data to be used for this field's default value. More 
 displayPreview 
 Enable displaying preview of the uploaded file. Overrides related Collection's displayPreview option. More.            
 localized 
 Enable localization for this field. Requires localization to be enabled in the Base config.                                             
 required 
 Require this field to have a value.                                                                                                                                         
 admin 
 Admin-specific configuration. Admin Options.                                                                                                    
 custom 
 Extension point for adding custom data (e.g. for plugins)                                                                                                                   
 typescriptSchema 
 Override field type generation with providing a JSON schema                                                                                                                 
 virtual 
 Provide true to disable field in the database. See Virtual Fields 
 graphQL 
 Custom graphQL configuration for the field. More details 
* An asterisk denotes that a property is required.
collections/ExampleCollection.ts
Options can be dynamically limited by supplying a query constraint, which will be used both for validating input and filtering available uploads in the UI.
The filterOptions property can either be a Where query, or a function returning true to not filter, false to prevent all, or a Where query. When using a function, it will be called with an argument object with the following properties:
 Property      
 Description                                                                                           
 relationTo 
 The collection slug to filter against, limited to this field's relationTo property                
 data 
 An object containing the full collection or global document currently being edited                    
 siblingData 
 An object containing document data that is scoped to only fields within the same parent of this field 
 id 
 The id of the current document being edited. id is undefined during the create operation      
 user 
 An object containing the currently authenticated user                                                 
 req 
 The Payload Request, which contains references to payload, user, locale, and more.              
You can learn more about writing queries here.
 Note:
When an upload field has both filterOptions and a custom validate function, the api will not validate filterOptions unless you call the default upload field validation function imported from payload/shared in your validate function.
The upload field on its own is used to reference documents in an upload collection. This can be considered a "one-way" relationship. If you wish to allow an editor to visit the upload document and see where it is being used, you may use the join field in the upload enabled collection. Read more about bi-directional relationships using the Join field
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/access-control/overview

Access Control determines what a user can and cannot do with any given Document, as well as what they can and cannot see within the Admin Panel. By implementing Access Control, you can define granular restrictions based on the user, their roles (RBAC), Document data, or any other criteria your application requires.
Access Control functions are scoped to the operation, meaning you can have different rules for create, read, update, delete, etc. Access Control functions are executed before any changes are made and before any operations are completed. This allows you to determine if the user has the necessary permissions before fulfilling the request.
There are many use cases for Access Control, including:
There are three main types of Access Control in Payload:
Payload provides default Access Control so that your data is secured behind Authentication without additional configuration. To do this, Payload sets a default function that simply checks if a user is present on the request. You can override this default behavior by defining your own Access Control functions as needed.
Here is the default Access Control that Payload provides:
Important: In the Local API, all Access Control is skipped by default. This allows your server to have full control over your application. To opt back in, you can set the overrideAccess option to false in your requests.
The Admin Panel responds dynamically to your changes to Access Control. For example, if you restrict editing ExampleCollection to only users that feature an "admin" role, Payload will hide that Collection from the Admin Panel entirely. This is super powerful and allows you to control who can do what within your Admin Panel using the same functions that secure your APIs.
To accomplish this, Payload exposes the Access Operation. Upon login, Payload executes each Access Control function at the top level, across all Collections, Globals, and Fields, and returns a response that contains a reflection of what the currently authenticated user can do within your application.
Important: When your access control functions are executed via the Access Operation, the id and data arguments will be undefined. This is because Payload is executing your functions without referencing a specific Document.
If you use id or data within your access control functions, make sure to check that they are defined first. If they are not, then you can assume that your Access Control is being executed via the Access Operation to determine solely what the user can do within the Admin Panel.
To implement locale-specific access control, you can use the req.locale argument in your access control functions. This argument allows you to evaluate the current locale of the request and determine access permissions accordingly.
Here is an example:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/access-control/collections

Collection Access Control is Access Control used to restrict access to Documents within a Collection, as well as what they can and cannot see within the Admin Panel as it relates to that Collection.
To add Access Control to a Collection, use the access property in your Collection Config:
Access Control is specific to the operation of the request.
To add Access Control to a Collection, use the access property in your Collection Config:
The following options are available:
 Function     
 Allows/Denies Access                                                 
 create 
 Used in the create operation. More details.             
 read 
 Used in the find and findByID operations. More details. 
 update 
 Used in the update operation. More details.             
 delete 
 Used in the delete operation. More details.             
If a Collection supports Authentication, the following additional options are available:
 Function     
 Allows/Denies Access                                                                     
 admin 
 Used to restrict access to the Admin Panel. More details. 
 unlock 
 Used to restrict which users can access the unlock operation. More details. 
If a Collection supports Versions, the following additional options are available:
 Function           
 Allows/Denies Access                                                                                                                                   
 readVersions 
 Used to control who can read versions, and who can't. Will automatically restrict the Admin UI version viewing access. More details. 
Returns a boolean which allows/denies access to the create request.
To add create Access Control to a Collection, use the create property in the Collection Config:
The following arguments are provided to the create function:
 Option     
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
 data 
 The data passed to create the document with.                                                                                  
Returns a boolean which allows/denies access to the read request.
To add read Access Control to a Collection, use the read property in the Collection Config:
Tip: Return a Query to limit the Documents to only those that match the constraint. This can be helpful to restrict users' access to specific Documents. More details.
As your application becomes more complex, you may want to define your function in a separate file and import them into your Collection Config:
The following arguments are provided to the read function:
 Option    
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
 id 
 id of document requested, if within findByID.                                                                             
Returns a boolean which allows/denies access to the update request.
To add update Access Control to a Collection, use the update property in the Collection Config:
Tip: Return a Query to limit the Documents to only those that match the constraint. This can be helpful to restrict users' access to specific Documents. More details.
As your application becomes more complex, you may want to define your function in a separate file and import them into your Collection Config:
The following arguments are provided to the update function:
 Option     
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
 id 
 id of document requested to update.                                                                                         
 data 
 The data passed to update the document with.                                                                                  
Similarly to the Update function, returns a boolean or a query constraint to limit which documents can be deleted by which users.
To add delete Access Control to a Collection, use the delete property in the Collection Config:
As your application becomes more complex, you may want to define your function in a separate file and import them into your Collection Config:
The following arguments are provided to the delete function:
 Option    
 Description                                                                                                                                            
 req 
 The Request object with additional user property, which is the currently logged in user. 
 id 
 id of document requested to delete.                                                                                                                  
If the Collection is used to access the Admin Panel, the Admin Access Control function determines whether or not the currently logged in user can access the admin UI.
To add Admin Access Control to a Collection, use the admin property in the Collection Config:
The following arguments are provided to the admin function:
 Option    
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
Determines which users can unlock other users who may be blocked from authenticating successfully due to failing too many login attempts.
To add Unlock Access Control to a Collection, use the unlock property in the Collection Config:
The following arguments are provided to the unlock function:
 Option    
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
If the Collection has Versions enabled, the readVersions Access Control function determines whether or not the currently logged in user can access the version history of a Document.
To add Read Versions Access Control to a Collection, use the readVersions property in the Collection Config:
The following arguments are provided to the readVersions function:
 Option    
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/access-control/globals

Global Access Control is Access Control used to restrict access to Global Documents, as well as what they can and cannot see within the Admin Panel as it relates to that Global.
To add Access Control to a Global, use the access property in your Global Config:
Access Control is specific to the operation of the request.
To add Access Control to a Global, use the access property in the Global Config:
The following options are available:
 Function     
 Allows/Denies Access                                            
 read 
 Used in the findOne Global operation. More details.  
 update 
 Used in the update Global operation. More details. 
If a Global supports Versions, the following additional options are available:
 Function           
 Allows/Denies Access                                                                                                                                   
 readVersions 
 Used to control who can read versions, and who can't. Will automatically restrict the Admin UI version viewing access. More details. 
Returns a boolean result or optionally a query constraint which limits who can read this global based on its current properties.
To add read Access Control to a Global, use the read property in the Global Config:
The following arguments are provided to the read function:
 Option    
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
Returns a boolean result or optionally a query constraint which limits who can update this global based on its current properties.
To add update Access Control to a Global, use the access property in the Global Config:
The following arguments are provided to the update function:
 Option     
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
 data 
 The data passed to update the global with.                                                                                    
If the Global has Versions enabled, the readVersions Access Control function determines whether or not the currently logged in user can access the version history of a Document.
To add Read Versions Access Control to a Collection, use the readVersions property in the Global Config:
The following arguments are provided to the readVersions function:
 Option    
 Description                                                                                                                   
 req 
 The Request object containing the currently authenticated user. 
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/access-control/fields

Field Access Control is Access Control used to restrict access to specific Fields within a Document.
To add Access Control to a Field, use the access property in your Field Config:
Note: Field Access Controls does not support returning Query constraints like Collection Access Control does.
Access Control is specific to the operation of the request.
To add Access Control to a Field, use the access property in the Field Config:
The following options are available:
 Function     
 Purpose                                                                                                    
 create 
 Allows or denies the ability to set a field's value when creating a new document. More details. 
 read 
 Allows or denies the ability to read a field's value. More details.                               
 update 
 Allows or denies the ability to update a field's value More details.                            
Returns a boolean which allows or denies the ability to set a field's value when creating a new document. If false is returned, any passed values will be discarded.
Available argument properties:
 Option            
 Description                                                                                                                  
 req 
 The Request object containing the currently authenticated user 
 data 
 The full data passed to create the document.                                                                                 
 siblingData 
 Immediately adjacent field data passed to create the document.                                                               
Returns a boolean which allows or denies the ability to read a field's value. If false, the entire property is omitted from the resulting document.
Available argument properties:
 Option            
 Description                                                                                                                  
 req 
 The Request object containing the currently authenticated user 
 id 
 id of the document being read                                                                                              
 doc 
 The full document data.                                                                                                      
 siblingData 
 Immediately adjacent field data of the document being read.                                                                  
Returns a boolean which allows or denies the ability to update a field's value. If false is returned, any passed values will be discarded.
If false is returned and you attempt to update the field's value, the operation will not throw an error however the field will be omitted from the update operation and the value will remain unchanged.
Available argument properties:
 Option            
 Description                                                                                                                  
 req 
 The Request object containing the currently authenticated user 
 id 
 id of the document being updated                                                                                           
 data 
 The full data passed to update the document.                                                                                 
 siblingData 
 Immediately adjacent field data passed to update the document with.                                                          
 doc 
 The full document data, before the update is applied.                                                                        
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/hooks/overview

Hooks allow you to execute your own side effects during specific events of the Document lifecycle. They allow you to do things like mutate data, perform business logic, integrate with third-parties, or anything else, all during precise moments within your application.
With Hooks, you can transform Payload from a traditional CMS into a fully-fledged application framework. There are many use cases for Hooks, including:
There are four main types of Hooks in Payload:
Reminder: Payload also ships a set of React hooks that you can use in your frontend application. Although they share a common name, these are very different things and should not be confused. More details.
Root Hooks are not associated with any specific Collection, Global, or Field. They are useful for globally-oriented side effects, such as when an error occurs at the application level.
To add Root Hooks, use the hooks property in your Payload Config:
The following options are available:
 Option           
 Description                                            
 afterError 
 Runs after an error occurs in the Payload application. 
The afterError Hook is triggered when an error occurs in the Payload application. This can be useful for logging errors to a third-party service, sending an email to the development team, logging the error to Sentry or DataDog, etc. The output can be used to transform the result object / status code.
The following arguments are provided to the afterError Hook:
 Argument            
 Description                                                                                                                                                                                     
 error 
 The error that occurred.                                                                                                                                                                        
 context 
 Custom context passed between Hooks. More details.                                                                                                                                 
 graphqlResult 
 The GraphQL result object, available if the hook is executed within a GraphQL context.                                                                                                          
 req 
 The PayloadRequest object that extends Web Request. Contains currently authenticated user and the Local API instance payload. 
 collection 
 The Collection in which this Hook is running against. This will be undefined if the hook is executed from a non-collection endpoint or GraphQL.               
 result 
 The formatted error result object, available if the hook is executed from a REST context.                                                                                                       
All Hooks can be written as either synchronous or asynchronous functions. Choosing the right type depends on your use case, but switching between the two is as simple as adding or removing the async keyword.
If the Hook should modify data before a Document is updated or created, and it relies on asynchronous actions such as fetching data from a third party, it might make sense to define your Hook as an asynchronous function. This way you can be sure that your Hook completes before the operation's lifecycle continues. Async hooks are run in series - so if you have two async hooks defined, the second hook will wait for the first to complete before it starts.
If your Hook simply performs a side-effect, such as updating a CRM, it might be okay to define it synchronously, so the Payload operation does not have to wait for your hook to complete.
Hooks are only triggered on the server and are automatically excluded from the client-side bundle. This means that you can safely use sensitive business logic in your Hooks without worrying about exposing it to the client.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/hooks/collections

Collection Hooks are Hooks that run on Documents within a specific Collection. They allow you to execute your own logic during specific events of the Document lifecycle.
To add Hooks to a Collection, use the hooks property in your Collection Config:
Tip: You can also set hooks on the field-level to isolate hook logic to specific fields. More details.
All Collection Hooks accept an array of synchronous or asynchronous functions. Each Collection Hook receives specific arguments based on its own type, and has the ability to modify specific outputs.
The beforeOperation hook can be used to modify the arguments that operations accept or execute side-effects that run before an operation begins.
Available Collection operations include create, read, update, delete, login, refresh, and forgotPassword.
The following arguments are provided to the beforeOperation hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between Hooks. More details.                                                                                       
 operation 
 The name of the operation that this hook is running within.                                                                                           
 req 
 The Web Request object. This is mocked for Local API operations. 
Runs during the create and update operations. This hook allows you to add or format data before the incoming data is validated server-side.
Please do note that this does not run before client-side validation. If you render a custom field component in your front-end and provide it with a validate function, the order that validations will run in is:
The following arguments are provided to the beforeValidate hook:
 Option            
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between Hooks. More details.                                                                                       
 data 
 The incoming data passed through the operation.                                                                                                       
 operation 
 The name of the operation that this hook is running within.                                                                                           
 originalDoc 
 The Document before changes are applied.                                                                                                              
 req 
 The Web Request object. This is mocked for Local API operations. 
Immediately following validation, beforeChange hooks will run within create and update operations. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.
The following arguments are provided to the beforeChange hook:
 Option            
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 data 
 The incoming data passed through the operation.                                                                                                       
 operation 
 The name of the operation that this hook is running within.                                                                                           
 originalDoc 
 The Document before changes are applied.                                                                                                              
 req 
 The Web Request object. This is mocked for Local API operations. 
After a document is created or updated, the afterChange hook runs. This hook is helpful to recalculate statistics such as total sales within a global, syncing user profile changes to a CRM, and more.
The following arguments are provided to the afterChange hook:
 Option            
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 doc 
 The resulting Document after changes are applied.                                                                                                     
 operation 
 The name of the operation that this hook is running within.                                                                                           
 previousDoc 
 The Document before changes were applied.                                                                                                             
 req 
 The Web Request object. This is mocked for Local API operations. 
Runs before find and findByID operations are transformed for output by afterRead. This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the doc argument.
The following arguments are provided to the beforeRead hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 doc 
 The resulting Document after changes are applied.                                                                                                     
 query 
 The Query of the request.                                                                                                      
 req 
 The Web Request object. This is mocked for Local API operations. 
Runs as the last step before documents are returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.
The following arguments are provided to the afterRead hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 doc 
 The resulting Document after changes are applied.                                                                                                     
 query 
 The Query of the request.                                                                                                      
 req 
 The Web Request object. This is mocked for Local API operations. 
Runs before the delete operation. Returned values are discarded.
The following arguments are provided to the beforeDelete hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 id 
 The ID of the Document being deleted.                                                                                                                 
 req 
 The Web Request object. This is mocked for Local API operations. 
Runs immediately after the delete operation removes records from the database. Returned values are discarded.
The following arguments are provided to the afterDelete hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 doc 
 The resulting Document after changes are applied.                                                                                                     
 id 
 The ID of the Document that was deleted.                                                                                                              
 req 
 The Web Request object. This is mocked for Local API operations. 
The afterOperation hook can be used to modify the result of operations or execute side-effects that run after an operation has completed.
Available Collection operations include create, find, findByID, update, updateByID, delete, deleteByID, login, refresh, and forgotPassword.
The following arguments are provided to the afterOperation hook:
 Option           
 Description                                                                                                                                           
 args 
 The arguments passed into the operation.                                                                                                              
 collection 
 The Collection in which this Hook is running against.                                                                 
 req 
 The Web Request object. This is mocked for Local API operations. 
 operation 
 The name of the operation that this hook is running within.                                                                                           
 result 
 The result of the operation, before modifications.                                                                                                    
The afterError Hook is triggered when an error occurs in the Payload application. This can be useful for logging errors to a third-party service, sending an email to the development team, logging the error to Sentry or DataDog, etc. The output can be used to transform the result object / status code.
The following arguments are provided to the afterError Hook:
 Argument            
 Description                                                                                                                                                                                     
 error 
 The error that occurred.                                                                                                                                                                        
 context 
 Custom context passed between Hooks. More details.                                                                                                                                 
 graphqlResult 
 The GraphQL result object, available if the hook is executed within a GraphQL context.                                                                                                          
 req 
 The PayloadRequest object that extends Web Request. Contains currently authenticated user and the Local API instance payload. 
 collection 
 The Collection in which this Hook is running against.                                                                                                           
 result 
 The formatted error result object, available if the hook is executed from a REST context.                                                                                                       
For Auth-enabled Collections, this hook runs during login operations where a user with the provided credentials exist, but before a token is generated and added to the response. You can optionally modify the user that is returned, or throw an error in order to deny the login operation.
The following arguments are provided to the beforeLogin hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 req 
 The Web Request object. This is mocked for Local API operations. 
 user 
 The user being logged in.                                                                                                                             
For Auth-enabled Collections, this hook runs after successful login operations. You can optionally modify the user that is returned.
The following arguments are provided to the afterLogin hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 req 
 The Web Request object. This is mocked for Local API operations. 
 token 
 The token generated for the user.                                                                                                                     
 user 
 The user being logged in.                                                                                                                             
For Auth-enabled Collections, this hook runs after logout operations.
The following arguments are provided to the afterLogout hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 req 
 The Web Request object. This is mocked for Local API operations. 
For Auth-enabled Collections, this hook runs after me operations.
The following arguments are provided to the afterMe hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 req 
 The Web Request object. This is mocked for Local API operations. 
 response 
 The response to return.                                                                                                                               
For Auth-enabled Collections, this hook runs after refresh operations.
The following arguments are provided to the afterRefresh hook:
 Option           
 Description                                                                                                                                           
 collection 
 The Collection in which this Hook is running against.                                                                 
 context 
 Custom context passed between hooks. More details.                                                                                       
 exp 
 The expiration time of the token.                                                                                                                     
 req 
 The Web Request object. This is mocked for Local API operations. 
 token 
 The newly refreshed user token.                                                                                                                       
For Auth-enabled Collections, this hook runs after successful forgotPassword operations. Returned values are discarded.
The following arguments are provided to the afterForgotPassword hook:
 Option           
 Description                                                                           
 args 
 The arguments passed into the operation.                                              
 collection 
 The Collection in which this Hook is running against. 
 context 
 Custom context passed between hooks. More details.                       
For Auth-enabled Collections, this hook allows you to optionally replace the default behavior of the refresh operation with your own. If you optionally return a value from your hook, the operation will not perform its own logic and continue.
The following arguments are provided to the afterRefresh hook:
 Option     
 Description                              
 args 
 The arguments passed into the operation. 
 user 
 The user being logged in.                
For Auth-enabled Collections, this hook allows you to optionally replace the default behavior of the me operation with your own. If you optionally return a value from your hook, the operation will not perform its own logic and continue.
The following arguments are provided to the me hook:
 Option     
 Description                              
 args 
 The arguments passed into the operation. 
 user 
 The user being logged in.                
Payload exports a type for each Collection hook which can be accessed as follows:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/hooks/globals

Global Hooks are Hooks that run on Global Documents. They allow you to execute your own logic during specific events of the Document lifecycle.
To add Hooks to a Global, use the hooks property in your Global Config:
Tip: You can also set hooks on the field-level to isolate hook logic to specific fields. More details.
All Global Hooks accept an array of synchronous or asynchronous functions. Each Global Hook receives specific arguments based on its own type, and has the ability to modify specific outputs.
Runs during the update operation. This hook allows you to add or format data before the incoming data is validated server-side.
Please do note that this does not run before client-side validation. If you render a custom field component in your front-end and provide it with a validate function, the order that validations will run in is:
The following arguments are provided to the beforeValidate hook:
 Option            
 Description                                                                                                                                           
 global 
 The Global in which this Hook is running against.                                                                         
 context 
 Custom context passed between Hooks. More details.                                                                                       
 data 
 The incoming data passed through the operation.                                                                                                       
 originalDoc 
 The Document before changes are applied.                                                                                                              
 req 
 The Web Request object. This is mocked for Local API operations. 
Immediately following validation, beforeChange hooks will run within the update operation. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.
The following arguments are provided to the beforeChange hook:
 Option            
 Description                                                                                                                                           
 global 
 The Global in which this Hook is running against.                                                                         
 context 
 Custom context passed between hooks. More details.                                                                                       
 data 
 The incoming data passed through the operation.                                                                                                       
 originalDoc 
 The Document before changes are applied.                                                                                                              
 req 
 The Web Request object. This is mocked for Local API operations. 
After a global is updated, the afterChange hook runs. Use this hook to purge caches of your applications, sync site data to CRMs, and more.
The following arguments are provided to the afterChange hook:
 Option            
 Description                                                                                                                                           
 global 
 The Global in which this Hook is running against.                                                                         
 context 
 Custom context passed between hooks. More details.                                                                                       
 doc 
 The resulting Document after changes are applied.                                                                                                     
 previousDoc 
 The Document before changes were applied.                                                                                                             
 req 
 The Web Request object. This is mocked for Local API operations. 
Runs before findOne global operation is transformed for output by afterRead. This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the doc argument.
The following arguments are provided to the beforeRead hook:
 Option        
 Description                                                                                                                                           
 global 
 The Global in which this Hook is running against.                                                                         
 context 
 Custom context passed between hooks. More details.                                                                                       
 doc 
 The resulting Document after changes are applied.                                                                                                     
 req 
 The Web Request object. This is mocked for Local API operations. 
Runs as the last step before a global is returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.
The following arguments are provided to the beforeRead hook:
 Option         
 Description                                                                                                                                           
 global 
 The Global in which this Hook is running against.                                                                         
 context 
 Custom context passed between hooks. More details.                                                                                       
 findMany 
 Boolean to denote if this hook is running against finding one, or finding many (useful in versions).                                                  
 doc 
 The resulting Document after changes are applied.                                                                                                     
 query 
 The Query of the request.                                                                                                      
 req 
 The Web Request object. This is mocked for Local API operations. 
Payload exports a type for each Global hook which can be accessed as follows:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/hooks/fields

Field Hooks are Hooks that run on Documents on a per-field basis. They allow you to execute your own logic during specific events of the Document lifecycle. Field Hooks offer incredible potential for isolating your logic from the rest of your Collection Hooks and Global Hooks.
To add Hooks to a Field, use the hooks property in your Field Config:
All Field Hooks accept an array of synchronous or asynchronous functions. These functions can optionally modify the return value of the field before the operation continues. All Field Hooks are formatted to accept the same arguments, although some arguments may be undefined based the specific hook type.
Important: Due to GraphQL's typed nature, changing the type of data that you return from a field will produce errors in the GraphQL API. If you need to change the shape or type of data, consider Collection Hooks or Global Hooks instead.
To add hooks to a Field, use the hooks property in your Field Config:
The following arguments are provided to all Field Hooks:
 Option                      
 Description                                                                                                                                                                                    
 collection 
 The Collection in which this Hook is running against. If the field belongs to a Global, this will be null.                                                   
 context 
 Custom context passed between Hooks. More details.                                                                                                                                
 data 
 In the afterRead hook this is the full Document. In the create and update operations, this is the incoming data passed through the operation.                                            
 field 
 The Field which the Hook is running against.                                                                                                                             
 findMany 
 Boolean to denote if this hook is running against finding one, or finding many within the afterRead hook.                                                                                    
 global 
 The Global in which this Hook is running against. If the field belongs to a Collection, this will be null.                                                       
 operation 
 The name of the operation that this hook is running within. Useful within beforeValidate, beforeChange, and afterChange hooks to differentiate between create and update operations. 
 originalDoc 
 In the update operation, this is the Document before changes were applied. In the afterChange hook, this is the resulting Document.                                                        
 overrideAccess 
 A boolean to denote if the current operation is overriding Access Control.                                                                                       
 path 
 The path to the Field in the schema.                                                                                                                                     
 previousDoc 
 In the afterChange Hook, this is the Document before changes were applied.                                                                                                                   
 previousSiblingDoc 
 The sibling data of the Document before changes being applied, only in beforeChange and afterChange hook.                                                                                  
 previousValue 
 The previous value of the field, before changes, only in beforeChange and afterChange hooks.                                                                                               
 req 
 The Web Request object. This is mocked for Local API operations.                                          
 schemaPath 
 The path of the Field in the schema.                                                                                                                                     
 siblingData 
 The data of sibling fields adjacent to the field that the Hook is running against.                                                                                                             
 siblingDocWithLocales 
 The sibling data of the Document with all Locales.                                                                                                            
 siblingFields 
 The sibling fields of the field which the hook is running against.                                                                                                                             
 value 
 The value of the Field.                                                                                                                                                  
Tip: It's a good idea to conditionally scope your logic based on which operation is executing. For example, if you are writing a beforeChange hook, you may want to perform different logic based on if the current operation is create or update.
Runs during the create and update operations. This hook allows you to add or format data before the incoming data is validated server-side.
Please do note that this does not run before client-side validation. If you render a custom field component in your front-end and provide it with a validate function, the order that validations will run in is:
In this example, the beforeValidate hook is used to process the username field. The hook takes the incoming value of the field and transforms it by trimming whitespace and converting it to lowercase. This ensures that the username is stored in a consistent format in the database.
Immediately following validation, beforeChange hooks will run within create and update operations. At this stage, you can be confident that the field data that will be saved to the document is valid in accordance to your field validations.
In the emailField, the beforeChange hook checks the operation type. If the operation is create, it performs additional validation or transformation on the email field value. This allows for operation-specific logic to be applied to the field.
The afterChange hook is executed after a field's value has been changed and saved in the database. This hook is useful for post-processing or triggering side effects based on the new value of the field.
In this example, the afterChange hook is used with a membershipStatusField, which allows users to select their membership level (Standard, Premium, VIP). The hook monitors changes in the membership status. When a change occurs, it logs the update and can be used to trigger further actions, such as tracking conversion from one tier to another or notifying them about changes in their membership benefits.
The afterRead hook is invoked after a field value is read from the database. This is ideal for formatting or transforming the field data for output.
Here, the afterRead hook for the dateField is used to format the date into a more readable format using toLocaleDateString(). This hook modifies the way the date is presented to the user, making it more user-friendly.
The beforeDuplicate field hook is called on each locale (when using localization), when duplicating a document. It may be used when documents having the exact same properties may cause issue. This gives you a way to avoid duplicate names on unique, required fields or when external systems expect non-repeating values on documents.
This hook gets called before the beforeValidate and beforeChange hooks are called.
By Default, unique and required text fields Payload will append "- Copy" to the original document value. The default is not added if your field has its own, you must return non-unique values from your beforeDuplicate hook to avoid errors or enable the disableDuplicate option on the collection. Here is an example of a number field with a hook that increments the number to avoid unique constraint errors when duplicating a document:
Payload exports a type for field hooks which can be accessed and used as follows:
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

URL: https://payloadcms.com/docs/hooks/context

The context object is used to share data across different Hooks. This persists throughout the entire lifecycle of a request and is available within every Hook. By setting properties to req.context, you can effectively share logic across multiple Hooks.
Context gives you a way forward on otherwise difficult problems such as:
Let's see examples on how context can be used in the first two scenarios mentioned above:
To pass data between hooks, you can assign values to context in an earlier hook in the lifecycle of a request and expect it the context in a later hook.
For example:
Let's say you have an afterChange hook, and you want to do a calculation inside the hook (as the document ID needed for the calculation is available in the afterChange hook, but not in the beforeChange hook). Once that's done, you want to update the document with the result of the calculation.
Bad example:
Instead of the above, we need to tell the afterChange hook to not run again if it performs the update (and thus not update itself again). We can solve that with context.
Fixed example:
The default TypeScript interface for context is { [key: string]: unknown }. If you prefer a more strict typing in your project or when authoring plugins for others, you can override this using the declare syntax.
This is known as "type augmentation", a TypeScript feature which allows us to add types to existing types. Simply put this in any .ts or .d.ts file:
This will add the property myObject with a type of string to every context object. Make sure to follow this example correctly, as type augmentation can mess up your types if you do it wrong.
Star
Discord
 online
Use Cases
Developers
Company
Stay connected

================================================================================

